In compile_object, it is possible for the object to get loaded twice, 
causing the game to crash.  The sequence of events on our mud was to call 
an external object to create the virtual object; when created, this 
external object moved a couple of monsters into some rooms; one of these 
rooms turned out to be the same virtual room that was currently being 
created - so a recursive call to compile_object was made to create it; the 
create() function in the external object finished; the external function 
then cloned up a new object, initialized it, and returned it; the driver 
then crashed because it had already entered an object with that name into 
the hash table. 
(djohnson@cs.ucsd.edu)
 
-----
 
        :z   
           set_wandering(1, 120, 0);
           set_chats(({
                    "smile",
                    "sing Santa Claws is coming to town!",
                    "say Do we have any good children here?",
                    "say You must be kind to your fellow people.",
                    "smile Do you believe in the magic of christmas?",
                    "smile",
                    "laugh"
                    }), 10);
        :I
        Indenting entire code...
        Done indenting.
        :I
        Indenting entire code...
        Detected a unterminated string on line 43
        Indention halted.
        :43
                    "l}), 10);
        :-10
           
        :z
           
           set_wandering(1, 120, 0);
           set_chats(({
                    "smile",
                    "sing Santa Claws is coming to town!",
                    "say Do we have any good children here?",
                    "say You must be kind to your fellow people.",
                    "smile Do you believe in the magic of christmas?",
                    "smile",
                    "laugh"
                    "l}), 10);
        }
        :Q
        Exit from ed.
 
So there has been extra "l inserted into during the first intendation
which caused the second intendation to barf about the unterminated string.
 
-----
 
following code crashed Genocide multiple times:
  string *stuff; 
  stuff = ({ "test1", "test2", "test3"}); 
  stuff[0][2..4] = "ab"; 
  write(stuff[0]);
(maurg@csv.warwick.ac.uk)
 
following code crashes NannyMUD apparently:
  ({ 1, 2, 3 })[1..0] = ({ 1, 2 });
 
-----
 
When using the efun say() with an array of "targets" to exclude as second 
argument, it doesnt seem to exclude any of them but instead both objects gets 
the message, even worse, when I got the first of the two items in the 
array = 0 the GD just crashes.
(Ged)

hence,   crasher: say("hello", ({ 0 })); 
 
-----
 
printf("%.5ftest", 1.0);
prints 1.000, but it should print 1.000test
(maurg@csv.warwick.ac.uk)
 
-----
 
Could you fellas make it possible to refresh the simul_efun without taking 
down the whole mud ? i.e. not doing a shutdown ! As it is now, one can make 
changes in the function that are present but you cannot add or remove 
function and then update the simul_efun object. 
(Radagast)
 
-----
 
crasher: message("say", "hello", ({ 0 }))
(same problem as say()?)
 
-----

save_object doesn't prepend a "/" to the filename before passing to 
valid_write()
(bobf@metronet.com)
 
-----
 
lvalue lifetime bug: There isn't an easy fix for it and it leads to delayed 
and unpredictable crashes. It's simplest form is something like a[0]=(a=0). 
There the reference to a[0] is pushed on the stack, a gets freed and then 
the area formerly occupied by a gets assigned something. This leads to 
especially nasty effects if you do something more on the right hand side, 
i.e. a function call which deallocates a and then loads an object into the 
free space - has rather devastating effects, I assure you. Fixing that 
means major changes in the gamedriver.

-----

Lots of places in the code that do an apply and don't free the ret value.
Here, Amylaar seems to be saying that we should.  This could be the source
of some memory leaks... yes?

   d = apply(sort_array_cmp_func, sort_array_cmp_ob, 2);
    if (!d) {
        return 0;
    }
    if (d->type != T_NUMBER) {    /* In case it's not a number --Amylaar */
        free_svalue(d);
        ret = 0;

(garnett@gestalt.austin.tx.us)

-----

need a way to tell the driver to try reconnecting to the addr_server
after it has gone down and come back up (the addr_server).  maybe
the driver could just retry every now and then?
(garnett@gestalt.austin.tx.us)

-----

Overflowing (s)printf() buffers can cause a crash.
(bobf@metronet.com)

-----
