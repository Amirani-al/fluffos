heart_beat() is not shadowable

-----

need a way to tell the driver to try reconnecting to the addr_server
after it has gone down and come back up (the addr_server).  maybe
the driver could just retry every now and then?

--john

-----

read_file() doesn't guarantee that a "/" is at the start of the filename
before passing to valid_read()...same problem might exist with
write_file(), read_bytes(), write_bytes(), didn't check yet

(ucs_brf@pip.shsu.edu)

Comment:
    This problem is rather common in the driver currently.  Internally,
    filenames have no leading '/'.  One should probably be added every time
    a filename is passed to the mudlib.

-----

hm, Linux apparently doesn't let you open a directory for reading. boggle.
so all the efuns that read from a file will screw up if you try
to use a dir as the file.  ack

ucs_brf@pip.shsu.edu

-----

    sprintf.c should probably be rewritten as it has a nasty habit of
    munging the stack and writing to places without checking the destination
    type if it's ok; probably should also remove need for setjmp/longjmp;
    also: err = setjmp(...) is non strict ANSI portable according to SAS
    tech support for their C compiler (SAS/C)

-----

    mixed a;
    do {} while (a = ({ a, "" }));

Profezzorn@TMI-2

Comment:
    It would be nice if things like this, where all the memory (VM too)
    is sucked up by a runaway program, didn't cause the driver to
    shutdown ("Out of memory").

-----

Currently, binaries are not checked to see if they are out of date with
respect to the simul_efun object, causing wierd behavior of binaries of
the order of the simuls changes, and then a binary is loaded.

------

edit_source should check for the existence of a.out to see if compilation
succeeded.  The exit code of the compiler is correct alot, but not on
all systems.  Should probably use -o somefile instead of assuming a.out
as well.

-----

Line numbers get messed up when files don't end in a newline?

-----

anonymous function pointers don't work in LPC->C

-----

Range/switch search should be binary, not linear. (in LPC->C)

-----

strings longer than MAXSHORT screw up statistics, b/c their length is counted
inconsistently.

-----

Connected to address server on localhost port 6364
secure/master/compile.c line 37: Undefined variable 'ob'

secure/master/compile.c line 44: parse error
secure/master/compile.c line 49: Illegal LHS
secure/master/compile.c line 56: Illegal LHS
secure/master/compile.c line 56: parse error
secure/master/compile.c line 70: Illegal LHS
MDfree: right side of entry corrupt: reallocate_locals:2 0220
MDfree: right side of entry corrupt: reallocate_locals:3 400617d8
Segmentation fault (core dumped)

(gdb) where

#0  0xb7b30 in deactivate_current_locals () at compiler.c:141
#1  0x2e9d4 in yyparse () at grammar.y.pre:2362
#2  0xbb9e8 in compile_file (f=4, name=0x7b033e60 "secure/master.c")
    at compiler.c:1220
#3  0x58c50 in load_object (lname=0x40056709 "secure/master", lpc_obj=0x0)
    at simulate.c:448
#4  0x40db8 in main (argc=2, argv=0x7b033a4c) at main.c:384

(gdb) print current_prog
$1 = (program_t *) 0x0
(gdb) print current_file
$2 = 0x40067248 "secure/master/security.c"
(gdb) print current_line
$3 = 99

Line 97-101 as follows:
-------------

int
valid_write( string file, object ob, string fun )
{
    string *ok;
-------------

The line that seems to cause the crash is the one that fails
in compile.c (line 44)

> if ( file_size(USER_SAVE_DIRS_V[type] nom[0..0]) != -2 )
(Spot the missing '+', adding that cures the crash.)
USER_SAVE_DIRS_V is a string *, nom is a string.

                            !A

-------

Probably need a test to see if bison's output actually compiles in
./build.Mudos;  on alot of AIX systems bison's use of alloca() fails.

-Beek

-------

The current implementation of swapping could use alot of work.  Swapping
an object in/out isn't that expensive CPU wise, and can save a decent amount
of memory.  The problem is that cloned programs can't swap, which disables
swapping for much of the mud ...

-Beek

------

foreach() in LPC->C needs the foreach_depth fixes and some code for foreach
it also needs the loop generation cleanup

------

grep crasher again?
reclaim_objects() ?
