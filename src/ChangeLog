Thu Jan 28 02:33:23 CST 1993 (John Garnett)
	* bumped the patchlevel up to 0.9.15
	* removed #pragma alloca from config.h (for RS/6000) since MudOS doesn't
	  use alloca() anymore.

Tue Jan 26 23:56:06 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.18
	* ifdef'd out fchmod() prototype for Linux in file.c and simulate.c
	  -- fix from Stranger@TMI-2
	* In a previous release, I optimized the code generation for FOR
	  and WHILE loops.  This optimization interacted with a pre-existing
	  optimization to cause a nasty little bug in which the first
	  statement of the body of a 'for loop' could be (incorrectly)
	  modified depending on the contents of the third 'for_expression'.
	  This bug is what caused the old tmi soul (atmos) to generate
	  a runtime error that it didn't generate before.  This bug is now dead.
	* COMPAT BUSTER: modified restore_object() and save_object() to both
	  take an optional additional (integer) parameter which specifies whether
	  or not to save variables having value 0.  save_object(filename)
	  or save_object(filename, 0) will _not_ save variables having value
	  zero.  save_object(filename, 1) will save variables having value zero
	  (this is the old default behavior).  restore_object(filename) or
	  restore_object(filename, 0) _will_ zero out all non-static variables
	  before doing the restore.  restore_object(filename, 1) will not
	  zero out non-static variables before doing the restore (this is
	  the old default).  The idea is that many objects in most mudlibs
	  contain variables that usually have value 0.  Not saving these
	  variables can save a noticeable amount of disk space. -- patch
	  submitted by Armidale@Cyberworld.
	* added ARCH def for Linux in port.h (capitalized some of the others).
	* added #ifndef's to port.h for Linux (FD_SETSIZE and SOMAXCONN)
	  -- these Linux fixes were reported by Stranger@TMI-2
	* added !defined(linux) for rmdir(), unlink() in lint.h for Linux
	* renamed socket_errors.* to socket_err.* for Linux filesystem.
	* added SAVE_EXTENSION to options.h.  This lets an extension other than
	  .o be used by save_object() and restore_object().  (Some sysadmins
	  run scripts that periodically scan for and remove .o files since
	  these files are also left hanging around by UNIX(tm) compilers).
	* fixed a bug in T_FUNCTION case in dumpstat.c (added & to two parameters)
	* replaced smalloc.c with Amylaar's latest version
	  (adapted to MudOS by Blackthorn).  This version of smalloc.c is 
	  markedly faster than the old smalloc.c and appears to be as efficient
	  in memory usage.  It also may work on some machine(s) that used to
	  have data alignment problems with the old smalloc.

Mon Jan 25 07:30:02 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.17
	* added a few support files to be kept in the src directory
	  (e.g. README, Platforms, Install, Credits.*, etc).  The doc dir in
	  the main distribution will probably have symlinks to these files.
	* moved ChangeLog.0 and ChangeLog.1 out of the source (src) directory.
	  These will still be available in the main MudOS_0.9.tar.Z releases.
	* fixed a bug introduced into debug_info in 0.9.14.15 (fixes crasher)
	* replaced smalloc.c with the original version of smalloc that
	  MudOS 0.8.14 (and before) used.  This version appears to have fewer
	  problems than the version that's been a part of MudOS as of late
	  (the smalloc we were using didn't behave correctly on HPs in that
	  it allocated memory that wasn't freed even when the driver shutdown).
	  Note: if your mud is using more memory than you think it should
	  (the amount of memory reported by 'ps' is 30% or more higher than
	  that reported by status), then you may wish to try smalloc.  While
	  smalloc may have problems with alignment etc on some machines, it is
	  still much more efficient for LPmuds than BSD malloc (and some system
	  mallocs) and thus worth trying.  Apparently, BSD malloc can introduce
	  overhead as much as 35% or more (while smalloc seemingly introduces a
	  constant amount of overhead, e.g. 700,000 bytes).

Sun Jan 24 13:57:17 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.16
	* added Olav Kolbu's patches to port MudOS to Linux 0.99.3.  Someone should
	  doublecheck to make sure it does in fact now compile under Linux since I
	  applied the patches by hand (the patches were for 0.9.14.14).  Linux
	  users will need to install "loopback telnet" before using this port.
	* defined SOMAXCONN and FD_SETSIZE for linux in port.h.  These should
	  be removed and obtained from .h files when the Linux .h structure
	  stabilizes.
	* changed f_function_split() in eoperators.c so that it doesn't allow
	  call_other's on destructed objects.
	* copied back the Makefile from 0.9.14.14 since some machines (like HP)
	  had problems with the one in 0.9.14.15.
	* note: the yacc provided by some machines has a hardcoded limit on
	  the number of terminals allowed.  Two possible solutions: 1) build
	  lang.tab.* on a machine without such limits and move them over,
	  2) get bison (yacc replacement) from prep.ai.mit.edu:/pub/gnu and
	  use it instead.
	* changed absorb_mapping() to INLINE in lint.h to match mapping.c

Sat Jan 23 20:02:34 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.15
	* changed the debugmalloc (md.c) code to get a more accurate idea of
	  how memory is being used.  Each *ALLOC() (memory allocation call)
	  is now indexed by a different consecutive integer.  The
	  debugmalloc(filename, 0) efun can be used to dump the memory allocated
	  on a per *ALLOC() call basis to a file.  In order to take advantage
	  of these additional debugging facilities, the driver must be compiled
	  using DEBUGMALLOC and DEBUGMALLOC_EXTENSIONS in options.h.  Only
	  define these options when tracking memory usage (don't leave them
	  defined all the time in a production mud -- it would be too slow).
	* fixed a problem in the T_MAPPING case of F_INDEX in interpret.c.
	  map[ind] wasn't returning the right answer in the case where map
	  had a ref count of 1 (e.g. rusage()["usertime"])
	  -- reported by Blackthorn.
	* changed dump_socket_status(void) to dump_socket_status() in func_spec.c
	  -- fixes a potential crasher.
	* added error() efun which is like throw() but doesn't require a catch().
	* changed dump_file_descriptors(void) in func_spec.c to be
	  dump_file_descriptors() -- should fix a potential crasher.
	* fixed filter_array() in func_spec.c to not take first arg of type
	  mapping since filter_array() doesn't yet handle mappings.
	* changed sizeof() in func_spec.c to be "int sizeof(mixed)";
	* changed snoop() in func_spec.c so that 1st arg can't be void.
	* changed func_spec.c so that debug_info takes args (int, object).
	  Fixed debug_info() not to check # of args and type of 2nd arg
	  (eval_instruction() will do this for us) -- reported by Olav Kolbu.
	* fixed print_svalue() in simulate.c to know about T_MAPPING and T_FUNCTION
	* fixed dumpallobj() to handle T_FUNCTION (fixes crasher) -- reported by
	  Darin Johnson.
	* added a new efun "int refs(mixed)" that returns the number of
	  references to a given data structure (object, array, mapping, funp).
	  This is useful when deciding whether or not to make a copy of
	  a datastructure when responding to a query.
	* added "expr_t *pop_expression();" to prelang.y
	* cleaned up Makefile some (Luke Mewburn)
	* refixed the ed "set" command (missed one place needing fixed last time).
	  Also fixed a couple of cosmetics (typos etc).
	* changed postlang.y so that & can be used to intersect arrays as was
	  originally intended (the typechecking wasn't being done correctly).
	* changed process_value() in parse.c to use find_object() instead of
	  find_object2() so that process_string() will work correctly even if
	  the objects in question aren't already loaded.
	* changed set_call() in comm.c to only unset SGA if it were previously set.
	  I suspect that copy_chars() may have something to do with the newlines
	  problem experienced with get_char().
	* applied Luke Mewburn's patches to port MudOS to 386BSD 0.1.
	  The changes were fairly minimal.  Luke recommends that
	  if a person wishes to install MudOS on a 386bsd system, they should
	  first apply Terry Lambert's entire patchkit, and also follow the
	  instructions on installing 'crypt'.
	* ported MudOS to Apple UNIX(tm), A/UX. This required only minimal changes.
	  Note that A/UX's version of yacc is old and can't handle more than
	  200 symbols (if it can I don't know how to make it do so).  This means
	  you'll need to build lang.tab.c and lang.tab.h on some other machine
	  and move them to A/UX (be sure to add -D_AUX_SOURCE to CFLAGS in
	  the Makefile on the non-A/UX machine when building lang.tab.*.  Also
	  make sure that you configure config.h in the same way on both machines).
	  Thanks to the UT Austin RTF ACTLAB for making the machine available to
	  do the port.

Sat Dec 19 20:29:45 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.14
	* note: the suggested course of action is to try using 0.9.14.14.
	  If it crashes for unknown reasons then try 0.9.14.13, then 0.9.14.12,
	  and finally 0.9.14.8 until you get to a version that doesn't crash
	  in the way this one does (if it does :).  Let me know which versions
	  run okay for you: (mudos-bugs@gestalt.austin.tx.us).
	* added the optimized version of += (F_ADD_EQ and F_VOID_ADD_EQ) to
	  interpret.c.  This involves minor changes in postlang.y, prelang.y
	  and lex.c as well.  I did not add the optimization for += on arrays
	  (since I suspect this was the cause of the crasher that Blackthorn saw
	  on Genocide).
	* added F_VOID_ASSIGN to interpret.c (involved small mods to prelang.y and
	  and postlang.y).
	* added absorb_mapping to mapping.c.  This function is now used by the
	  mapping case of +=.  This means that: "map1 += map2;" will change
	  the original instance of map1 rather than creating a new one.  Thus:
	  map1 += map2; becomes a faster way to do:
	  k = keys(map2); for (j = 0; j < sizeof(k); j++) map1[k[j]] = map2[k[j]];
	  If you wish the old behavior of +=, use map1 = map1 + map2.

Sat Dec 19 16:07:38 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.13
	* fixed a bug in ed in which the 'set' command sometimes crashed the
	  driver (the loop termination detection condition wasn't correct).
	* added a new function valid_hide() to the driver that is to be
	  called whenever "valid_hide" needs to be applied on the master object.
	* changed message() so that it delivers messages to hidden objects
	  regardless of whether or not the sender can hide.
	* COMPAT BUSTER: changed log_file() efun to call valid_write in master

Fri Dec 18 21:56:53 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.12
	* fixed the general compile time switch case problem
	* added some add_instr_name() entries to lex.c for the new instructions.
	* changed some declarations in lint.h for the Apollo (e.g. major, minor)
	* made minor changes to addr_server.c, comm.c, file.c, socket_efuns.c,
	  efunctions.c, efuns.h, comm.h, port.h, socket_efuns.h, prelang.y that
	  were necessary for the Apollo.
	* removed check_for_recursion() from array.c since its unused.
	* inlined setup_new_frame in interpret.c
	* changed push_number(0) to push_null() in setup_new_frame()
	* moved f_add_eq into F_ADD_EQ of interpret.c
	* changed the F_JUMP_WHEN_NON_ZERO in the FOR lang.y production to
	  F_BBRANCH_WHEN_NON_ZERO (faster branches)
	* moved the efun interface into the default case of the switch in
	  interpret.c (one less "if then" in the most often taken path)
	* moved f_add_eq into the interpret.c switch
	* moved f_call_function_by_addr into the interpret.c switch
	* note: I've left out the patches that gave the performance boosts on
	  += for strings and arrays.  I think these may be the ones that caused
	  the crash (if the changes were what was responsible -- We'll see).
	  I'll attempt adding these after this release has run okay for a while.
	* trashed changes from 0.9.14.9 to 0.9.14.11 since 0.9.10 crashes
	  for Blackthorn and 0.9.14.8 didn't.  I'm reapplying most of them here.

Fri Dec 18 02:39:36 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.8
	* added F_BYTE and F_NBYTE operators for storing numeric constants that
	  will fit in a byte (saves some memory).
	* added relative branch instructions: F_BRANCH, F_BRANCH_WHEN_ZERO,
	  F_BRANCH_WHEN_NON_ZERO, F_BBRANCH_WHEN_ZERO, and F_BBRANCH_WHEN_NON_ZERO
	  so that expressions may generate relocatable code (necessary for
	  the LPC loop optimizatons).
	* fixed expressions containing logical ANDs and logical ORs (in postlang.y)
	  to use relative branching (so that expressions can be relocated).
	* added SNOOP_SHADOWED to options.h.

Thu Dec 17 06:24:16 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.7
	* fixed replace_string so that a non-string 3rd argument won't crash
	  driver (thanks to Fifth Dimension mud for reporting this).
	* inserted some "last_expression = -1" statements in postlang.y.
	* changed the type of arg_index in the lex.c keyword struct to be a
	  short instead of a char (this fixes a bug that occurs with
	  typechecking of efuns when more than 127 different argument type
	  combinations exist (Thanks to Dracos@VH for reporting this)).
	* added defined(sgi) to one place in file.c (for sysmacros.h) and
	  one place in efunctions.c for the timezone stuff (thanks to Kringled
	  for pointing out what needed done for a Silicon Graphics (SGI) port).
	* fixed a bug in the FOR production in postlang.y.  There was a typecast
	  "(short)jump" that should have been "(unsigned short)jump".  Hopefully,
	  this explains the crasher Genocide was seeing with 0.9.14.4.
	* removed F_INDIRECT from prelang.y and lex.c since its not used.

Wed Dec 16 19:31:58 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.6
	* added (char *) typecasts to the new MALLOC()'s in postlang.y.
	* optimized append_vector() and prepend_vector() functions since
	  UnderDark seems to use append_vector a lot.  I imagine that the
	  real solution is to optimize the LPC "+=" operator.

Wed Dec 16 08:07:11 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.5
	* readded arch() to func_spec.c (somehow it disappeared)
	* added the F_INC and F_DEC optimizations to postlang.y and interpret.c.
	  This removes an additional instruction from the typical for loop.
	* optimized eval_instruction a bit.
	* added the moncontrol() efun which is enabled when -DPROFILING is
	  added to CFLAGS in the makefile.  This efun allows profiling to
	  be turned on and off from an LPC object (so that its easier to
	  profile a specific part of the driver).

Tue Dec 15 09:32:39 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.4
	* optimized the three LPC loop productions (for, while, do while) in
	  postlang.y.  The optimizations involve delaying inserting the code
	  for the loop test expressions until after the code for the loop body
	  has been inserted (I followed the lead set in Amylaar's 3.1.2k driver).
	  This optimization works by using fewer LPC instructions per loop
	  iteration (7 instead of 9 in the for loop).  The net improvement on
	  The VOID_ADD_EQ optimization (and others) remains to be done (this
	  would shave another LPC instruction from the for loop).
	* ifdef'd the varargs code in add_message() in comm.c since some
	  compilers don't support it.
	* ifdef hpux'd the inclusion of lint.h in bsdmalloc.c

Tue Dec 15 00:49:23 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.3
	* changed string literals to span multiple lines (allowing newlines to
	  be implicitly embedded).  Might have to change this back if there
	  turns out to have been a reason for disallowing this in the first place.
	* added a new feature similar to the << EOF text reading feature
	  provided by Perl.  The @ character now means interpret from 'here'
	  til the end of the line as the "terminator".  Lex then considers each
	  following line up to the terminator as forming part of a string literal.
	  An example usage is as follows:
	  /* assume this is at the left margin */
	  x = @END
	  This is taken literally.
	  And so is this.
	  END
	  ;

Mon Dec 14 19:38:42 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.2
	* enhanced the driver to allow variables of type function to be indexed
	  with [] in the same way that mappings and arrays are.  Note that
	  function variables may only be indexed with 0 or 1.  Thus:
	  'function f; f = (: obj, func :); f[0] = obj2; f[1] = str2;' and
	  'obj2 = f[0]; str2 = f[1]' are possible.

Mon Dec 14 02:19:58 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.1
	* undef'd TRACE_CODE in options.h since benchmarks show that this
	  doubles the speed of eval_instruction (for many of the operators).
	* fixed a problem with the new function variable type.  (*x)() wasn't
	  returning values properly.
	* changed the apply_master_ob in smart_log to safe_apply_master_ob
	  since without it repeated errors in log_error in master.c can
	  (and do) crash the driver.
	* properly inlined push_funp, make_funp, and free_funp and moved them
	  to eoperators.c since xlc in AIX 3.2 is still complaining about not being
	  able to -Q optimize interpret.c (and it was able to in 0.9.13.11).

Sun Dec 13 03:05:44 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14
	* moved F_ADD_EQ back to eoperators.c for now since the AIX 3.2 optimizer
	  seems to like it better there.
	* created a combined src/documentation release (left out the mini-mudlib)

Sat Dec 12 11:30:18 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.14
	* fixed add_message() again (moving lines around).

Sat Dec 12 09:21:29 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.13
	* fixed a bug in main.c that prevented flags like -f and -d from working.
	* fixed a bug in f_present().. should have been if (num_arg == 2).
	  Fixes another crasher (introduced not long ago).
	* fixed lots of gcc 2.3.2 -Wall warnings (they get pickier and pickier
	  with every gcc release!).
	* fixed a bug in add_message() introduced in 0.9.13.1 (ip not initialized)
	  This fixes a crasher.
	* changed F_CALL_EFUN eoper to F_CALL_EXTRA since now it is only used
	  for opcodes that are larger than (F_OFFSET + 255) rather than for
	  all efuns.  This should somewhat reduce the size of objects (code).
	* do not do runtime type-checking of eoperators unless #define DEBUG.
	  This will improve performance (eoperators already individually check the
	  types of their args anyway).  Type-checking of efuns is unchanged.
	* changed various strlen() calls to SVALUE_STRLEN which takes advantage
	  of the fact that the length of shared strings is stored in the
	  shared string table (the length is stored at an offset from the head
	  of the string).
	* moved f_add_eq back into the switch (inlining fails and is often used
	  in loops).

Fri Dec 11 10:14:25 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.12
	* added a new data type named 'function' to LPC.  Variables of this
	  type are able to point to (object, function) pairs.  The constructor
	  for variables of this type is as follows:  x = (: object, function :);
	  Functions pointed to by such variables may be called as follows:
	  (*x)(arg0, arg1, ...);  This statement is translated into the
	  statement object->function(arg0, arg1, ...).  Note that object and
	  function may be anything allowed by call_other (including using
	  an array as the first arg).  This new type is quite useful when
	  implementing function-valued attributes (properties).
	* added functionp() efun for checking if a variable is of type function.

Thu Dec 10 14:58:59 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.11
	* applied Jacques patches that make the necessary changes so the
	  driver can be compiled using xlc on the RS/6000 (AIX). xlc with
	  -O -Q makes for quite a zippy driver.
	* added a couple of changes to the Makefile to convey the possibility
	  of using xlc (Jacques)
	* added !defined(__SEQUENT__) to #ifdef NeXT in access_check.c
	* fixed a lingering bug in get_stats() that was a crasher (when
	  domain_stats() or author_stats() efuns were called).
	* INLINED add_heart_beats
	* added Mapping(nodes) and Interactives to stats in f_mud_stats() efun.
	* added a total_users stat to comm.c
	* added new stat to mapping.c: total_mapping_nodes.
	* fixed total_mapping_size statistic again.  Wasn't doing the right
	  thing in mapping.c:growMap. 
	* changed present() efun so that if LAZY_RESETS are defined, a reset is
	  tried on ob before present(blah, ob) is performed.
	* scrapped the function hashing code from Dark (we experienced too many
	  problems given the perceived gain).  We nuked patches
	  0.9.13.4 - 0.9.13.10.

Mon Dec  7 23:53:29 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.3
	* added SET_EVAL_LIMIT to options.h.  Read the comment there.
	* added disable_wizard() efun (opposite of enable_wizard).
	* added SANE_EXPLODE_STRING to options.h.  Define this if you think
	  explode_string() efun shouldn't strip leading delimeters.
	* changed the output format of debugmalloc() efun slightly.
	* changed all *ALLOC() calls to D*ALLOC() so that debugmalloc() efun
	  can be better used to track down any memory leaks.
	* added Cynosure's livings() efun that returns an array of all objects
	  that have called enable_commands().

Sun Dec  6 19:10:16 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.13.2
	* fixed a delayed crasher explode("xxxyyy", "yy").  The algorithm
	  for computing the number of array elements in the exploded string
	  was incorrect (it was matching the delimeter against the last
	  characters in the string to see if the string ended in a delimeter --
	  in this case, such a method produces an incorrect answer).  Thanks
	  again to Ellery@Tmi-2.
	* fixed lex.c so that "#if 42/0" and "#if 42%0" no longer crash the
	  driver :) (thanks to Ellery of Tmi-2)
	* fixed tell_object() so that it doesn't crash when ob == 0.
	* changed F_INDENTIFIER so that if it attempts to push a destructed
	  object, it pushes NULL 0 rather than vanilla 0.
	* COMPAT_BUSTER: parameters in vararg functions for which arguments are
	  not provided are no longer initialized to UNDEFINED.  Instead they
	  are initialized to NULL.  This means you should use nullp() and not
	  undefinedp() to check for arguments that were not passed (as opposed
	  to being passed as zero).  This change was made to be consistent with
	  the way uninitialized variables behave and so that undefinedp won't
	  be so overloaded (thanks to Talyessin@Overdrive for pointing this out).
	* changed all the #endif NO_SHADOWS to #endif /* NO_SHADOWS */

Sat Dec 05 1992 20:55:21 PST (Wayfarer)
	* bumped the patchlevel up to 0.9.13.1
	* removed a couple more compiler warnings
	* dropped in Sean Reith's latest patches to sprintf.c
	* dropped in pinkfish's mods to ed.c
	* picked up tru's fix to mapping.c (fixed status keeping)
	* possible fix to blackthorne's problem with the missing third arg
	  to socket_create when using type SOCK_DGRAM.
	* thanks to Darin Johnson for the previous 6 bug reports.
	* COMPAT BUSTER! fixed command_giver mucking around happening in shout
	  and tell_room.  Now, when a shout or a tell_room happens, this_player
	  means what it was intended to mean: command_giver (the person who
	  did or caused the shout or tell_room to happen), rather than the
	  person receiving the message.  In message receiving functions like
	  catch_tell and receive_message, you shouldn't use this_player(), but
	  rather this_object()
	* fixed print_svalue so that it does a tell_object to both npc's
	  and users, rather than doing an add_message.
	* removed useless extra slice_array in f_message
	* cleaned up indentation of f_message
	* made a change to the snoop code so that if the data going to a user
	  has been shadowed away from the user by shadowing catch_tell, then 
	  the lead characters denoting snoop data are different.  Rather than
	  %%, they are will show up as $$ is the actual user isn't seeing that
	  data.
	* fixed Darin Johnson's bug in add_message.  When catch_tell on a user
	  was shadowed, the message was still going to the user.
	* fixed memory leak in get_info()
	* fixed make_func.y (~line 498)
	* made some makefile changes to localize cpp which might be different
	  for some systems.
	* fixed a bug in f_message that used the wrong arg to print when
	  this_player() == 0
	* fixed inlining problem in mapping_each()
	* changed the patchlevel to be a string

Wed Nov 25 02:07:36 CST 1992 (Truilkan)
	* bumped version to 0.9.13
	* fixed notify_no_command() fun so that disable_commands() efun can't
	  crash it by setting command_giver to 0.
	* deduced that free_vector was trying to free the zero vector because
	  the ref count to the zero vector was overflowing (> 32767).  Fixed
	  this by changing free_vector not to worry about the zero vector
	  overflowing.
	* removed the references to lstat() prototypes from simulate.c since that
	  file doesn't even call lstat().
	* changed 'master_ob = load_object(...)' to 'master_ob = find_object(...)'
	  in interpret.c.  Presumedly, this lets master be updated under
	  mudlibs in which it currently cannot.
	* fixed catch() so that it can't directly catch "eval cost too big" and
	  "too deep recursion errors".  This defeats LPC objects that attempt
	  to use catch() to hang the driver.
	* added a new runtime config option 'default fail message'.
	  This is the message displayed when an action returns 0.  The standard
	  LPC message has been "What ?" for a long time.  If the runtime
	  config file does not specify a default fail message, "What?" will
	  be used as a default.  This value can be overridden as usual with
	  the notify_fail() efun.
	* remove 12 more bytes from the mapping struct.  allocate_mapping(x)
	  is now equivalent to allocate_mapping(0).  Use x = ([]) instead of
	  x = allocate_mapping(0) unless you like to type a lot.  This change
	  is an experiment.  If it doesn't work out, we may go back to mapping.c
	  and mapping.h that are in MudOS 0.9.4.

Tue Nov 24 20:10:12 CST 1992 (Truilkan)
	* 0.9.11 and 0.9.12 were internal debugging releases that have been
	  scrapped.

Tue Nov 22 20:09:45 CST 1992 (Truilkan)
	* bumped version to 0.9.10
	* Added Michael Bundy's patches to make MudOS compile and run on
	  System V Release 4.  All of the changes he made except for one are
	  dependent on SVR4 being defined.  The only exception was the Makefile
	  where he had to change the .c.o rule. The compiler groks on the -o
	  option as "-o would overwrite filename.o".  To build MudOS under
	  System V Release 4, uncomment the lines in the Makefile following
	  comments containing the words "System V Release 4".
	* added a more aggressive optimization option (-O2 ...) to the Makefiles.
	* replace_string() efun no longer crashes when 0 is passed as 3rd arg.
	* changed the 'What ?' message to 'Hmm?' to see if anyone will notice :)
	* changed an #ifdef MSDOS in simulate.c to #ifndef MSDOS (all the
	  MSDOS stuff should probably be removed since we don't support it).
	* fixed lex.c so that the following macro expands correctly:
	  '#define SOURCE_NAME(ob) (explode(file_name(ob),"#")[0])'
	  Note: one related problem remains.. Token pasting doesn't pay attention
	  to whether or not ## is inside or outside of quotes.

Sat Nov 21 19:20:23 CST 1992 (Truilkan)
	* bumped version to 0.9.9
	* fixed a crasher in apply_low that was precipitated by the fix I did
	  in 0.9.8.  Apparently my "fix" undid a "fix" added in LPmud 3.1.1.
	  The original fix was intended to cause the cache not to be used in
	  the event that the object in question had been swapped out since the
	  last time the cache entry was accessed (since this would cause a
	  crash).  However, the original fix was too conservative in that
	  it prevented any inherited functions from being cached; so I added
	  a less conservative fix that should do the trick (keeping high cache hit
	  rates _and_ avoiding crashes caused by an intervening swap).  BTW,
	  anyone using a 3.1.2 decended driver other than MudOS may want to
	  adopt this fix since it almost doubles cache hit rate for most mudlibs
	  - Look for references to cache_oprogp in interpret.c).
	* added code to apply_low so that static and private modifiers are obeyed
	  on cached functions too (fix taken from Amylaar's driver).

Sat Nov 21 03:58:14 CST 1992 (Truilkan)
	* bumped version to 0.9.8
	* fixed a bug in the function cache code in apply_low.  Basically,
	  the code checking to see if a function is in the cache was messed up.
	  Cache hit rates should dramatically improve with this fix.  Hopefully,
	  the fix doesn't have bad side effects :)

Fri Nov 20 23:27:35 GMT-0500 1992 (Truilkan)
	* bumped version to 0.9.7
	* added an exit(-3) to crash_MudOS for when a crash happens from
	  inside crash_MudOS.

Fri Nov 20 21:02:48 CST 1992 (Truilkan)
	* bumped version to 0.9.6
	* fixed a potential crasher in set_prompt() (comm.c)
	* removed the two calls to add_cost() for now since we are calling
	  add_cost way too many times and aren't capturing all of the cost
	  anyway.  I'll add it back when we figure out where to best call
	  add_cost() from in order to minimize cpu cost and be accurate.
	* initialized a variable in sprintf.c

Fri Nov 20 19:08:44 CST 1992 (Truilkan)
	* bumped version to 0.9.5
	* fixed potential FREEs of non-malloc'd memory in children() efun
	  (introduced in 0.9.4).
	* made the each() efun optional.  undefining EACH in options.h will
	  save 12 bytes per allocated mapping.
	* reworked struct mapping not to need the theMask field to save 4
	  more bytes per mapping.
	* reworked struct mapping not to need the 'block' field to save
	  4 more bytes per mapping.
	* changed a few allocate_mapping() calls in mapping.c to make
	  intelligent guesses as to how many entries to preallocate.

Fri Nov 20 17:12:35 CST 1992 (Truilkan)
	* bumped version to 0.9.4
	* applied Cynosure's patch to replace_string so that it will correctly
	  catch result strings that grow too large.
	* changed array.c not to use alloca().
	* changed file.c not to use alloca().
	* changed main.c not to use alloca().
	* fixed a bug in the say() efun in which not enough memory was being
	  allocated.
	* changed simulate.c not to use alloca().
	* changed efunctions.c not to use alloca().
	* removed alloca.c from the distribution and makefiles
	* fixed MDmalloc to set a default desc if none is given.
	* changed legal_path() in file.c to disallow paths like stuf/./morestuf
	* changed 'new connection' and 'connection closing' messages to
	  be debug() statements instead of printfs.  Therefore, any mud wanting to
	  log IP addresses of those entering and leaving the mud should do so
	  from the mudlib.

Fri Nov 20 04:55:24 CST 1992 (Truilkan)
	* bumped version to 0.9.3
	* note: this version cleans up various memory leaks.  For anyone that
	  wants to help find leaks, the MallocDebug application on the NeXT
	  is a great tool for doing so (it is what I used to find these).
	* fixed a memory leak in the message() efun (freed vector returned
	  by all_inventory()).
	* added a FREE in rc.c to free the buffer used to hold the runtime
	  config file (free it after we don't need it anymore).  This should
	  save about 40k of memory.
	* changed lex.c so that memory allocated for #defines (in LPC objects)
	  is freed immediately after compilation rather than when the next
	  file is compiled.
	* fixed exec() efun to assume process_input and write_prompt are in
	  the new user object until proven otherwise.
	* changed MDmalloc in md.c so that the default tag for a chunk of memory
	  is 1 (so that debugmalloc(filename, 1) will dump all memory chunks
	  that were allocated without specifying a tag.  Only has an affect
	  with DEBUGMALLOC_EXTENSIONS is defined.
	* fixed a leak in call_function_interactive: FREE(args).

Thu Nov 19 20:34:29 CST 1992 (Truilkan)
	* bumped version to 0.9.2
	* moved a couple dozen of the more often used eoperators out of
	  eoperators.c and back into the switch() in interpret.c:eval_instruction()
	  for performance reasons (not all C compilers support the 'inline'
	  designator).
	* changed various instances of 'ip->text_start + ip->text' in comm.c
	  to 'ip->text + ip->text_start' (also ip->text_end).  AIX 3.0 and 3.1
	  have a bug which screws up (integer + pointer) but works fine on
	  (pointer + integer).  This bug apparently doesn't exist in AIX 3.2.
	  This solves the hang that happens at the password prompt.
	* changed get_user_data() in comm.c to use cmd_in_buf() instead of
	  first_cmd_in_buf() (slight performance gain).
	* fixed f_ne() so that using != on mappings doesn't cause a fatal().
	  (map1 != map2) will return true unless map1 and map2 are actually
	  references to the same map (regardless of whether or not map1 and map2
	  contain the same data).  Note: use !sizeof(map) instead of (map != ([])).
	* fixed f_member_array() so that if array contains a mapping, it won't
	  cause a fatal().
	* undef'd DROP_CORE in options.h since it defining it may be contributing
	  to the driver hanging after a crash (apparently on some DECstations).
	* added another warning about smalloc to Makefile and GNUmakefile.
	* added some Pinkfish patches to sprintf.c to support some of the wombly
	  stuf they do on DiscWorld (contains a bunch of bug fixes too).
	* changed func() call in mapTraverse to be (*func)()
	* added a va_end(args) in comm.c after a vprintf().
	* replaced a comma statement separator in ed.c with a semi-colon.
	* typecast a few calls to DMALLOC() with (char *)
	* added support for SIGIOT for those machines which don't have SIGABRT
	* inverted port.h check for RUSAGE (assumes existence of getrusage()
	  unless HP or Sequent).
	* removed a redundant check (pr->name[0] != fun[0]) from apply_low().
	* filter_array now allows value returned by filter to be any non-zero
	  (lifts the integer requirement).
	* put an #ifdef in localtime() efun for BSD 4.2 (see BSD42 in port.h)
	* fixed ASSERT() in bsdmalloc.c to not bomb out under non-ANSI C.
	* fixed each() efun to use mapping_each() in mapping.c.  Fixed each()
	  to reset to start of map (for the next time) once the end has been
	  reached (each() does still return ({}) at end of map).

Thu Nov 19 00:14:31 CST 1992 (Truilkan)
	* bumped version to 0.9.1
	* removed obsolete comment referencing MISSING_UALARM in ualarm.c
	* changed default MAX_USERS in options.h from 180 to 40.  This should
	  make the driver use much less memory at startup.
	* changed xalloc()'s in parse.c to XALLOC()'s and free()'s to FREE()'s.
	* changed options.h so that default malloc is SYSMALLOC and not
	  DEBUGMALLOC.  As before, BSD malloc and smalloc may be chosen in
	  the Makefile.  Be careful using BSD malloc as it appears it may have
	  a memory leak (could be something else).
	* changed make_func.y so that we don't toupper '_' in base.h
	* changed >= to < in main.c on the setdtablesize() check.
	* added the last flush_message() back to add_message() since it was
	  apparently a bad idea to remove it (or so I'm told :).
	* fixed a bug in f_author_stats (the case in which m is returned NULL)
	* extracted out all the #include and extern stuff from efunctions.c into
	  efuns.h so that it will be easier to put local efuns into a separate
	  .c file (such a .c file should #include "efuns.h").
	* fixed bug in apply_low (reported by Petri Virkkula) in which the
	  call_other cache can be left in an inconsistent state in the
	  event of a "too deep recursion" error.  Moved certain critical
	  assignments before the push_control_stack() call.
	* changed a few MALLOC()'s to DMALLOC()'s in socket_efuns.c.
