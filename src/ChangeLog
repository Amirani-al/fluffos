Mon Nov 21 13:51:25 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.22
	--- Beek section
	* COMPAT_BUSTER: the environment_destructing() master apply has
	  been removed.  move_or_destruct() is now called in all objects
	  in the inventory of a destructed object, regardless of whether
	  the object being destructed has an environment.  This
	  consolidates the behavior of the old move() apply and
	  the destruct_env_of/environment_destructing() apply.
	* Fixed a bunch of cases where non-scratchpad strings were
	  misrepresented as scratchpad strings (possible crashers?)
	* Rewrote scratchpad.c since it was accidentally based on FIFO
	  and not LIFO order; tests show the correct implementation
	  of the optimization speeds up compiling by something like 30%
	* fixed @BLOCK blocks to work correctly again
	* inlined string(), number(), and real() in lex.c
	  number() and real() were pointlessly short; string() is mostly
	  in scratch_copy_string now, as it's optimized to copy to the
	  scratchpad.
	* added a check to make sure the LIVING_HASH_SIZE is an even power
	  of 2; other hash tables are safe b/c we don't actually use the
	  numbers from the config file (!), we get them from options.h
	  instead.
	* fixed the int x = destruct(this_object()); crasher.  I'd love to
	  see the code that found it if Drevreck really ran into it ... :)
	--- Symmetry section
	* crasher/memory munger fix in switch()
	* fixed and optimized the subtraction case in interpret.c
	* crasher/memory munger fix in add_define
	* crasher fix in free_unused_identifiers
	--- Robocoder section
	* updated Smakefile, file.c and amiga/ support directory from
	  adr32 hosts/amiga dir support by Lars Duening
	* make_func.y: creates packages/Smakefile; added this file to the
	  "neat" cleanup in Makefile and GNUmakefile
	* cleaned up a bunch of files to avoid/suppress various warnings
	* func_spec.c: changed comments around a few #include to
	  preprocessor conditionals
	* lex.c fixed a possible problem with using an uninitialized
	  auto variable in skip_comment()

Sun Nov 20 12:56:33 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.21
	* fixed some serious bugs in restore_object(foo, 1);
	* fixed a crasher in the saving of negative integers
	* fixed call_outs so that they can be static again
	* changed a bunch of !c to c == '\0'; evidentally some compilers
	  are that stupid...
	* fixed a couple of problems with the static'ing of duplicate
	  variable names, also improved the handling of private variables
	  slightly.
	* fixed a crasher in the copying of large (>204 entry) function
	  tables

Wed Nov 15 12:04:11 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.20
	* changed all MALLOC() calls to DMALLOC() calls
	* implemented the grammar for anonymous functions and expression
	  by value in functionals
	* Added some debugging code to clear_state()
	* fixed a bug that caused the size of mappings not to be set
	  right, which causes memory to be corrupted when keys() is called
	  on the mapping.  Fixes several rather nasty and delayed crashes
	  in array -= and elsewhere.
	* fixed a bug that caused the number of references in the
	  identifier hash table to be too high when the simul_efun object
	  was updated; this could cause a crash if the first simul was
	  deleted.
	* updated the following docs:
	  __INIT
	  environment_destructing
	  implode
	  notify_fail
	  origin
	  restore_object
	  restore_variable
	  save_variable
	  telnet_suboption
	  terminal_type
	* removed an unused variable from copy_functions
	* converted #define's to use whashstr instead of hashstr (it's
	  faster)
	* converted the living hash table to use whashstr
	* added a warning to options.h that certain mudlibs require
	  certain options
	* converted the object hash table to use whashstr
	* COMPAT_BUSTER: if you redefine a variable, the old copy becomes
	  static.  previously, the first one was the one that was saved.
	* COMPAT_BUSTER: if a function is inherited from two different
	  objects, the second one is used.  Previously, the first one
	  was.

Mon Nov 14 12:56:40 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.19
	* fixed a bug in the real/real case of /=; fix from
	  Aleas@Nightmare
	* new apply:
	  void terminal_type(string term)
	  called in the object returned by connect() in the master object.
	  'term' is the terminal type of the user, as reported by terminal
	  negotiation; e.g. "xterm"
	* the telnet GA characters are only printed if the connection
	  responds to terminal negotiation
	* fixed a crasher in implode()
	* include file names are made shared strings early, instead of
	  malloc'ing a copy and making a shared string later
	* fixed a bug in the calling of ::#global_init# functions
	* fixed a crasher in object::foo() compilation
	* function table aliases are now replaced after compiling; fixes
	  the 'function not compiled with type testing' bug and two
	  crashers
	* fixed a problem with nomask prototypes causing odd errors
	* fixed it so that if the function actually isn't compiled with
	  type testing, you only get 1 error message, not two
	* fixed a typo that caused compilation to fail with
	  LOCALS_IN_TRACEBACK on
	* fixed a memory leak in restoring a value with duplicate keys
	* fixed several crashers in attempting to restore illegal strings
	* COMPAT_BUSTER: restore_object now leaves the affected variable
	  untouched when in finds a syntax error in a nested structure,
	  then gives an error.
	  previous behavior was to leave the value partly restored,
	  and to silently move on.
	* fixed a typo in mudlib_stats.c that caused compilation to fail
	  with NO_MUDLIB_STATS off
	* fixed a line in scratchpad.c that caused a compilation error
	  for some compilers
	* optimized variable name lookup for restore_object alot.  Now
	  uses shared string comparisions, and is optimized for the
	  case where the variables are in the order they're defined
	  in the object (i.e. guesses that the save file was made
	  by save_object)
	  
Thu Nov 10 09:08:26 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.18
	* removed a number of unused variables
	* added prototypes for some functions that were missing them
	* fixed alloc_local_name to actually return the name it allocated
	* fixed a crasher in check_valid_socket call from socket_create()
	* Rewrote the handling of inheritance and function tables;
	  only useful functions are put into the function trees, making
	  function searches even faster.
	* The above changes remove the nomask inheritance problem
	  mentioned in the Bugs file
	* removed the entry in the Bugs file for f=(: ob, ({ func, a, b }) :)
	  since NEW_FUNCTIONS fixes this already
	* Fixed a crasher in destruct(); if the object was dested again as
	  a result of moving it's inventory out of itself the mud would
	  crash. (old bug from Bugs file of 19.3)
	* changed the move() master apply since many mudlibs use move()
	  and it's a bad name anyway; now named "environment_destructing"
	* fixed a crasher for when tell_object() was passed a string
	  larger than LARGEST_PRINTABLE_STRING; as a result successfully
	  sent a 500k message to an interactive user.
	* Added Nightmare LPmud to the Credits file
	* COMPAT_BUSTER: the driver no longer uses __INIT for global
	  initializations, so anything that uses call_other(ob, "__INIT")
	  or ::__INIT() won't work any more.  The new function is:
	  private void #global_init#, so it can't be called explicitly
	  or played with.
	* origin() will now be right in all cases; functions called from
	  efuns (sort_array(), etc) get ORIGIN_EFUN.
	* added a case for function pointers in sameval(), which should
	  make function pointers act sanely as mapping keys.
	* optimized explode(); COMPAT_BUSTER:
	  if the first element of the array is not a string, a leading
	  delimeter is not printed, making it more consistent since
	  extra delimeters are not added internally, e.g.
	  old: implode( ({ 0, "a", "b", 5, "c" }), "," ) -> ",a,b,c"
	  new: implode( ({ 0, "a", "b", 5, "c" }), "," ) -> "a,b,c"
	* All driver applies can now be static or private.
	* previous_object is now zero in logon(), call outs, input_to
	  functions, socket and resolve callbacks
	* removed the need for '::' checks in call_other (optimization)
	* fixed a crasher in (: global_var :) with NEW_FUNCTIONS on
	* the heart_beat function is found via the function search tables
	  in epilog, instead of looking for it as we go
	* fixed a crasher for reporting runtime errors in the last line
	  of a file
	* removed the flags field of variables, saving 2 bytes/global var
	  per program
	* updated the disassembler with the new function flags
	* fixed some prototypes which didn't use Pn() in compiler_shared.c
	* changed the name of ORIGIN_BACKEND to ORIGIN_DRIVER; 
	  /include/origin.h keeps both names for compat
	* Fixed the old 'Warning: redefinition of #define ...' error that
	  was sent to users to actually be a real warning.
	* Removed almost all need for calling malloc() during compilation;
	  use various optimized allocators instead
	* Added a identifier hash table for quicker lookup of identifiers
	  and keywords
	* fixed restore_object to report which variable had a problem
	* fixed a crasher in string constants greater than 1k in size
	* added the start of a set_prompt() efun; not completed
	
Tue Nov  1 23:59:06 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.17
	* fixed a typo in compiler.pre that caused yacc to fail with
	  NEW_FUNCTIONS defined
	* fixed a problem with an IF_DEBUG define in apply_low and sapply that
	  prevented compilation with DEBUG off
	* moved the TRACE defines to interpret.h to allow the driver to
	  with TRACE_CODE on again.
	* fixed a crasher based on incorrect code generation for
	  conditional expressions whose value was unused.
	* Fixed a crasher in errors going through the error handler
	  when current object was zero (This is possible for some internal
	  errors like "No action linked to verb")
	* adding ({}) now copies the array again if it is referenced more
	  than once, fixes COMPAT_BUSTER accidentally introduced in 
	  v20.2
	* Small optimization to sapply()
	* added some debugging code to get better error messages on double
	  frees
	* added push_refed_vector() and friends, allowing referenced
	  arrays to be pushed onto the stack without having to fudge
	  the ref count afterwards.
	* added a check_valid_socket() routine, which eliminates a large
	  ammount of code duplication for calling valid_socket()
	* added a improved system for allocation of temporaries during
	  compilation, with several advantages: (1) it avoids calling
	  malloc(), (2) it doesn't leak memory on syntax errors
	* added an identifier hash table, speeding up the lookup of
	  identifiers during compilation
	* benchmarks show compilation is approx 15% faster
	* changed pop_n_elems(2) -> pop_2_elems(), etc
	* fixed a bug that caused crashes when optimizing
	* fixed a typo, allowing LOCALS_IN_TRACEBACK && 
	  !ARGUMENTS_IN_TRACEBACK to compile
	* moved the TRACE defines to interpret.h so eoperators.c can find
	  them
	* added a check for a maximum include file depth, for systems that
	  don't run out of file descriptors
	* fixed a bug that gave warnings for '\''
	* defines now allocate 1 chunk, not 3
	* fixed a use of FREE in make_func.y; make_func should compile
	  with wrappedmalloc or mallocdebug now
	* fixed a problem with saving/restoring integers within a factor
	  of 10 of MAXINT
	* fixed saving and restoring of real variables
	* fixed a bug that caused create() to sometimes not get called
	  with NO_UIDS defined

Mon Oct 31 15:24:20 EST 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.16
	* changed a typo in c_filter_array in array.c
	* added back in a check for maximum array size that had gotten
	  removed from array addition
	* removed some old debuging code in ccode.c
	* added a few new macros:
	  IF_DEBUG(x) evaluates to x only if DEBUG is on
	  DEBUG_CHECK(x,y) issues fatal(y) if x is true
	  this simplifies much of the debugging code since #ifdef
	  .. #endif isn't required
	* converted most of the debugging code to use the new macros
	* removed a reference to comp_stackp in ccode.c that caused
	  linking problems with LPC_TO_C on
	* fixed the code for preventing catch()ing of too deep recursion
	  and eval_cost errors.  Several wierd design flaws caused the old
	  code to work in many but not all situations.  Code is now
	  airtight.
	  (also resulted in a small optimization to function calls)
	* fixed a typo in the attempt to call a simul_efun while loading
	  the simul_efun object error message
	* added defines/functions call_program/call_absolute for running
	  code; with LPC_TO_C off they just call eval_instruction; with it
	  on they centralize the dispatch code.
	* added an error for Function is no longer a simul_efun
	* fixed a typo in the is_static fatal error message
	* removed the DEBUG check around TRACE_CODE again
	* removed an archaic prototype for comp_stackp in lint.h
	* fixed a bug that added the line '#include ""' to files if the
	  global include file line was missing from the config file
	* added several missing %ifdef and #ifdef NEW_FUNCTIONS lines
	* fixed a crasher in previous_object(-1)
	* fixed previous_object(-1) to return ({ }) instead of ({ 0 })
	  when there is no previous_object().
	* Lots of work cleaning up LPC_TO_C code so bring it closer to
	  compiling again

Tue Oct 17 22:59:30 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.15
	* added some files that were missing from the Makefile
	* fixed a typo in a comment in backend.c
	* removed a line that caused crashes for Demon@TMI-2 (optimizer
	  bug in xlc?  The change is essentially x &= ~2; x = 0; -> x = 0;)
	* fixed some cases that can cause fatal errors if code get
	  generated for them (it shouldn't, but evidentally it is ...)
	  from Symmetry
	* mapping and array constants are no longer marked as E_CONST
	  internally; check kind == F_AGGREGATE instead.
	* prevent cascading errors in the case of an undefined var, also
	  give the undefined var message in more cases; from Symmetry
	* fixed a typo in an error message for illegal index to a constant
	  mapping.
	* fixed a crasher where the flags were set wrong for function
	  calls; from Symmetry
	* changed the optimization of sizeof(constant mapping) slightly
	* moved generate_source() to the correct spot in alphabetical
	  order
	* fixed the tail() problem; from Symmetry
	* optimize_expr() now walks the tree; still does nothing
	* optimized generate_node() somewhat
	* fixed a problem that causes crashes for optimizable loops
	  of size > 256
	* added Symmetry's fixes for functionals
	* added a string addition optimization back in that got removed
	  some how
	* added a missing break; for NEW_FUNCTIONS undefined; probably
	  the cause of Drevreck's crasher
	* optimized and unspaghetified part of lex.c
	* added a warning for unimplemented \x escapes
	* added the HAS_STATUS_TYPES define to options.h
	* removed unused variables from generate_lvalue_list, 
	  assert_master_ob_loaded

Wed Oct 12 01:56:14 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.14
	* rewrote the compiler (!) to use parse trees; numerous
	  optimizations possible b/c of this; also greatly simplified
	  the fix for the lvalue lifetime bug, etc
	* removed some code duplication in checking efuns
	* removed F_JUMP; all branches are relative now (F_BBRANCH added)
	* renamed alot of stuff to be more informative:
	  F_GLOBAL, F_GLOBAL_LVALUE, F_LOCAL, F_LOCAL_LVALUE
	  instead of the previous inconsistent names
	* only put () after the instruction name if it's an efun
	  in bad argument error messages
	* F_LOOP_COND constant can now by F_BYTE etc and not just F_NUMBER
	* added a string out of range debug message in F_STRING
	* simplifications to the grammar:
	* all types are now returned as L_BASIC_TYPE with semantic value
	  of the type ("object" is an exception b/c of object:: parsing)
	* same with L_TYPE_MODIFIER
	* same with L_ASSIGN
	* new pragma: #pragma optimize
	  #pragma optimize - do default optimizations
	  #pragma optimize high - do all optimizations, and assume that
	                          the declared types are correct
          #pragma optimize all - all optimizations; currently the same as
                        	 high
	* fixed a bug in printing out of floating point numbers with %0
	* fixed a crasher resulting from the simul_efun object swapping
	  out and leaving the simul_efun pointers dangling; the simul_efun
	  object no longer swaps.
	* fixed the 'declare a temporary function to prevent tons of
	  errors' fix to not give redeclaration errors if the function
	  does show up later.
	* fixed a crasher when an object loaded without a current program
	  and an error occured and the error handler tried to call the
	  master object.  Caused crashes when the master object failed
	  to load off the boot.
	* If your global include file doesn't have "'s around it, they are
	  added.
	* Really fixed the crasher that was claimed fixed in v20.12
	  (moving an interactive and then returning zero from a command)
	  evidentally dates back to 0.9.16.18
	* fixed a crasher when OPCPROF and TRACE_CODE or TRACE was defined;
	  this also makes OPCPROF functional again
	* 'w' and 'W' with no argument now work in restricted ed mode;
	  this allows 'w', 'q' instead of 'x' to be used as well
	* Fixed ed to print tabs correctly with line numbers on;
	  caused the indentor to appear broken

Thu Oct 6 19:22:48 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.13
	* removed an unnecessary clear_notify() call in notify_fail()
	* moved f_simul_efun to eoperators.c since it is an eop
	* eoperators are now void f_eop(void) and not void f_eop(int, int);
	  the first argument was always -1 and the second was always the
	  same ...
	* fixed eoperators.h, which obviously hadn't been touched in
	  years ...
	* fixed the write_bytes error message; the two arguments were
	  backwards: "Wrong permissions for opening file /foo for
	  File does not exist. (append)"
	* Fixed a bug that caused write_bytes() to fail if the file didn't
	  exist.
	* slight optimization to <, >, <=, >=
	* fixed the DEBUG checks to check the stack after evaluation of
	  eoperators again
	* fixed some code that could in very rare cases miscalculate the
	  number of svalues to pop when an error occured
	* removed F_DUP
	* removed the type 'status' which was identical to 'int'; define
	  HAS_STATUS_TYPE in options.h to get it back
	* reorganized options.h a bit; put the compatibility defines
	  together up top, and noted what driver version each corresponds
	  to
	* Minor editing of some old changelogs
	* added query_notify_fail() as a contrib efun
	* added Symmetry's fix for the restore_object() memory leak
	* packed several interactive flags into one int saving about 
	  1K memory
	* only include trace_level and trace_prefix in the interactive
	  struct if TRACE is defined
	* notify_fail() no longer implictly calls process_string(); do so
	  explicitly if you want to use it
	* added notify_fail(function); the function is called when the
	  message is printed.  If a string is returned, it is printed
	  (tell_object or write can be used too; write() will go to the
	  person the message would have gone to if it were a string)
			
Tue Sep 27 21:21:47 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.12
	* fixed a definition of function_context in compiler_shared.c
	* improved the error message for bad argument 3 to message()
	* improved the error message for bad argument 1 to memory_info()
	* improved the error message for bad argument 1 to reload_object()
	* improved the error message for bad argument 2 to tell_room()
	* improved the error message for bad argument 1 to first_inventory()
	* fixed a bug in restore_variable
	* removed some code duplication in the routines for building
	  mappings (used by the error handler)
	* fixed some problems where 'signed' was used instead of 'SIGNED';
	  pre-ANSI compilers can't understand it
	* fixed a bug that caused write_bytes() to fail to write to the
	  correct position on some systems
	* fixed a bug that gave the wrong line numbers in tracebacks in
	  the error mapping
	* removed a prototype of mapping_too_large() since it's a macro
	  now
	* fixed a bug that caused .o files to occasionally be corrupted
	* added the file name to some error messages (Illegal path name,
	  Error in loading object, etc)
	* Fixed a bug that caused disable_commands() to remove the object
	  from it's environment
	* fixed a crasher when an object moves itself as the result of a
	  command then returns zero
	* added a debugging error message that prints the file name and
	  line if a crash occurs during compilation
	* small optimization to ref_string
	* fixed a type bug involving the use of casts in initializers, for
	  example:  int i = sizeof( (string *)foo->bar() ) used to give
	  type mismatch (string vs int) while initializing i.
	* fixed a crasher involving using an efun name as an undefined
	  variable
	* debug_info(ob, 2) now prints out a brief summary of the global
	  variables in an object

Sun Sep 25 16:04:31 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.11
	* Fixed a compile time line number bug that crept in when runtime
	  line numbers in include files was added.
	* Fixed a problem where default argument were not getting put into
	  efun pointers
	* fixed a bunch of definitions in object.c that didn't use Pn()
	* added string save_variable( mixed ) and mixed 
	  restore_variable( string ) for converting variables to and
	  from save_object's form
	* added a missing #ifndef NO_UIDS in set_privs_for_object()
	* Changed 'Error in look_for_objects_to_swap' to
	  'Error in clean_up() or reset()'
	* Fixed a typo in efuns_main.c (wrong number of args to
	  load_object())
	* fixed an incorrect prototype of previous_object() in func_spec.c
	* significantly optimized eval_instruction; made the code flow
	  clearer and easier to read
	* Fixed a bug that could leave constant strings dangling on when
	  objects were destructed
	* Added the start of a system to automatically put %line in the
	  grammar; not functional yet
	* Added a error message in make_func if you have more than 510
	  opcodes (which implies 430 efuns or so ...)
	* Fixed a crasher due to root_author and backbone_domain being
	  based on uids even when uids don't exists; with
	  #undef NO_MUDLIB_STATS and #define NO_UIDS the backbone
	  domain is now hard coded to "BACKBONE" and the root_author
	  is "NONAME".  Also, the root_author was changed to master_author
	  throughout the source as this is more accurate.
	* AUTO_SETEUID now works for the simul_efun object too
	* Added debugging code for easier debugging of future string
	  reference problems
	* The create() function doesn't need a type even if strict_types
	  is on this follows common LPC usage and C++ syntax; create()
	  is implicitly void unless defined otherwise

Sat Sep 24 16:51:06 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.10
	* Updated the following docs:
	  doc/concepts/message_doc
	  doc/lpc/types/function
	  doc/efuns/core/map.3
	  doc/efuns/core/evaluate.3
	  doc/efuns/communication/message.3
	  doc/efuns/properties/add_action.3
	  doc/efuns/system/eval_cost.3
	  doc/efuns/system/reset_eval_cost.3
	  doc/efuns/system/shadow.3
	  doc/efuns/system/max_eval_cost.3
	  doc/efuns/mappings/map_mapping.3
	  doc/efuns/filesystem/write_file.3
	  doc/efuns/objects/objects.3
	  doc/efuns/objects/load_object.3
	  doc/efuns/state/all_previous_objects.3
	  doc/efuns/types/sizeof.3
	  doc/efuns/types/typeof.3
	  doc/efuns/types/pointerp.3
	  doc/efuns/types/arrayp.3
	  doc/efuns/interactive/commands.3
	  doc/efuns/interactive/in_edit.3
	  doc/efuns/interactive/snoop.3
	  doc/efuns/arrays/map_array.3
	  doc/efuns/arrays/filter_array.3
	  doc/efuns/arrays/sort_array.3
	  doc/efuns/arrays/member_array.3
	  doc/applies/error_handler.4
	  doc/defines/__FILE__
	  doc/defines/README
	* Fixed another two "Anomaly" messages
	* added disassembler support for function pointers
	* fixed a problem that caused recursion if log_error used a 
	  simul_efun to try to report an error in the simul_efun object
	* fixed a crasher (dangling pointer) in simul_efun object updating
	  after it had failed to load
	* Fixed a problem with runtime line numbers;  they should be right
	  again now
	* made nesting of (: $var :) functionals work correctly
	* fixed a problem with using local variables in functionals
	* fixed some add_defines which should have been add_predefines
	  (snuck in via the v20 source)
	* move the -y flag to allow YYDEBUG to be used on the master and
	  simul_efun objects
	* variable names are not necessary for prototypes; i.e.
	  int stupid_function(int, string);
	  is legal
	* cleaned of the handling of argument names in the grammar
	* fixed a mistake in the "Undefined function foo" error message
	* prototyped yywarn()
	* define a varargs function when an undefined function is
	  encountered to reduce the number of errors produced
		
Wed Sep 21 08:46:51 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.9
	* added Thorin@TMI-2's patches to compile on SCO Unix
	* fixed problems (on some systems) with *= and /= based on
	  undefined behavior.
	* added changes from 0.9.19.26 -> v20
	* fixed a few "<< =" 's that survived since indent screwed them
	  up, spotted by Dana@TMI-2
	* remove some unused code in some of the function pointer
	  constructors
	* Fixed some function pointers to make errors before the function
	  pointer was called to not show the trace as in the function
	* Fixed a few bugs in restore_object(); should work correctly now
	* Fixed a counting problem with array statistics
	* Fixed a bug that reported ridiculous sizes for function pointers
	  in memory_info()  - Noticed by Meph@TMI-2
	* Added missing support for sprintf("%O", ...) when passed an
	  simul_efun pointer
	* Reorganized the tokens and made sure every expression returns
	  a start address (necessary for expression function pointers)
	* "Extra ';'.  Ignored." is now a warning instead of a fatal
	  error.
	* Simplified the grammar by condensing two comma_expr cases
	* COMPAT BUSTER: support for this_object function pointers
	  ( i.e. (: "foo" :) ) has been removed with NEW_FUNCTIONS
	  defined.  Use (: foo :) instead.  (: "foo" :) is now a
	  function which returns "foo" (see below).
	* Added support for the second to last version of function
	  pointers; "(: expression :)".  Arguments to the function
	  are represented as $1, $2, $3 ...
	  For example:
	  sort_array(arr, (: sizeof($1) < sizeof($2) :) );
 
Mon Sep 19 18:28:08 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.8
	* snoop() can now be called when this_player() is zero; the
	  restriction dated back to when snoop() used this_player()
	* removed two extraneous calls to store_line_number_info() that
	  were causing runtime line numbers to be off; they're now off
	  by exactly 1 I believe; still looking into it.
	* Several bugfixes to restore/save_object; they should work
	  correctly again
	* fixed a few potential crashers in parse_command
	* fixed a problem which caused extraneous printing of "Error in
	  error handler" when no error handler was in use
	* cleared the error state after a error in error handler;
	  previously the error handler became non-functional
	* added a call to end_new_file() when epilog() returns because
	  of errors or inheritance; fixes a bug which would erroneously
	  report "missing #endif"

Mon Sep 19 15:25:34 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.7
	* removed outdated rules for compiler.y and lpc_compiler.y in the
	  GNUmakefile
	* function arguments specified when a function pointer is made can
	  be used with arguments specified when it is called, and the
	  order is what you would expect, i.e.
	  function f = (: foo, a, b :);
	  (*f)(c);
	  is the same as foo(a,b,c);
	* classes for the message() efun may be of any type, not only a
	  string (idea from Misery@TMI-2)
	* used Px() defines for function definitions where they weren't
	  being used (reported by Drevreck@TMI-2)
	* moved contrib.c and contrib.spec to the packages/ directory
	* moved a bunch of ed defines to a new file (ed.h)
	* in_edit() now returns the file that is being edited
	  (idea from someone whose post has scrolled of the board)
	* print out compile errors to stderr if master::log_error doesn't
	  exist
	* fixed a problem with the definition of unique_array that
	  prevented function pointers from working with it
	* evaluating a function pointer created by an object which has
	  since been destructed is now an error 
	* fixed a bug that caused mappings to crash
	* added #ifdef NEW_FUNCTIONS around a reference to fake_prog
	* fixed a crasher in get_line_number_info
	* traces no longer go to stdout, only the debug.log
	* fixed some incorrect prototypes (add_define, etc)
	* fixed a few bugs in linenumbers, some involving the global
	  include file
	* added a warning for unknown pragmas
	* fixed a crasher involving the simul_efun not loading at startup
	* added a better message than 'Anomaly in the fabric of world
	  space.'
	* fixed a crasher with MUDLIB_ERROR_HANDLER and LOG_CATCHES
	* don't try to print a trace if the call to the mudlib error
	  handler fails, it will have been destroyed
	* gzip'ed two of the old changelogs
	* check arguments to efun function pointers

Sun Sep 18 07:22:17 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.6
	* optimized commands()
	* fixed a typo in commands()
	* optimized check_for_destr()
	* cleaned up the Bugs file
	* updated the GNUmakefile on the make_func changes from v20.5
	* added evaluate(f, ...) which is the same as (* f)(...)
	* evaluate(f, ...) now returns f if f is not a function
	* added global include file option based on diffs from
	  Marius@Savage.Garden
	* rewrote smart_log
	* added a max_eval_cost() efun
	* runtime errors now report the correct file and line for errors,
	  even if it was in a #include'd file
	* pragmas now use bits; change from Marius@Savage.Garden
	* predefined symbols (like HAS_SOCKETS) are added only once
	  instead of whenever a new file is started
	* Added support for compiler warnings; enabled with #pragma warnings
	* added a warning for '/*' inside of a comment
	* added a warning for unused conditional expressions, as in:
	    if (x == 0) x == 1;
	* any define in options.h is now sent to the mudlib surrounded by
	  '__' i.e. if LOG_CATCHES is defined in options.h, then
	  __LOG_CATCHES__ will be defined in all LPC objects.  This
	  adds a number of useful new predefines like __NEW_FUNCTIONS__
	* added a __FILE__ define
	* added support to turn some pragmas (warnings for example) on
	  by default in options.h
	* fixed an instance of add_map_stats with NO_MUDLIB_STATS defined
	  in object.c
	* removed light and object info from the object struct if they
	  aren't in use
	* fixed a compilation warning for NeXT
	* made scan_config_line iterative instead of recursive
	* moved start_new_file() into compile_file
	* the mudlib error handler now gets a 'file' field in addition to
	  the 'line' field in tracebacks
	* improved the bad arg x to efun ... error message
	* fixed a bug that caused type errors on simul efuns which had
	  type modifiers (varargs string vs string)
	* changed testsuite/clone/user.c's commandHook to use load_object

	* More diffs from Symmetry@TMI-2:
	* filter_array() can now pass multiple arguments to the function,
	  i.e. filter_array(arr, fun, a1, a2, a3, ...)
	  same with map()
	* Support for @foo and @@foo blocks in the indentor

Mon Sep 12 07:53:11 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.5
	* Fixed the generation of packages/GNUmakefile and dependencies in
	  the GNUmakefile
	* the array from commands() now includes the function as well as
	  the object; from Decker@TMI-2
	* optimized load_mapping_from_aggregate
	* write_file now takes a second arg, 1 means overwrite instead of
	  append.  Idea from Decker@TMI-2
	* Improved alot of compile time error messages
	* Added type checking to save_object()
	* Fixed a crasher in updating of the simul_efun object on
	  some systems
	* New efuns:
	  . load_object(string) - finds an object, loading it if necessary
	  . find_object(string, 1) - see load_object
	      - idea from Decker@TMI-2
	  . member_array(int, string) - find a character in a string
	  . third argument to member_array is now the start index;
	    support for the old flag removed
	  . sizeof(string) == strlen(string), and optimized sizeof
	  . this_interactive() == this_player(1)
	  . all_previous_objects() == previous_object(-1)
	  . arrayp(mixed) == pointerp(mixed)
	      - idea from Cygnus@TMI-2	  
	  . shadow(ob) == shadow(ob, 1)
	  . reset_eval_cost() == set_eval_limit(0);
	  . eval_cost() == set_eval_limit(-1);

	* Changes from Symmetry@TMI-2:
	* compiler.y and lpc_compiler.y are generated by make_func now
	  instead of via cat.
	* Fixed the function pointer grammar to compile on bison
	* optimized use of string function names in map_array etc.
	  (use them directly instead of simulating them with function pointers)
	* Fixed a really nasty bug in compatible_types() which effectively
	  disabled compile time type checking.  OLD_TYPE_BEHAVIOR is
	  offered for those who would rather have their buggy code
	  compile instead of fixing it.
	* Optimized and improved type checking in many of the eoperators
	* Optimized ident() in lex.c
	* optimized mapping operations
	* optimized save/restore_object

Fri Sep  9 02:14:18 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.4
	* Added tracebacks for errors in error handlers
	* Changed strdup() to string_copy() where it has snuck in
	* Added a Makefile option for bsdcc
	* Added support for efun packages
	  . package 'foo' has the functions specified by packages/foo.spec
	    and source in packages/foo.c; it is enabled with a
	    #include "packages/foo.spec" in func_spec
	  . Added a contrib package, currently empty (Send in those efuns!)
	  . moved efuns which deal with driver internals to 'develop'
	    package
	  . moved uid efuns to 'uid' package
	  . moved domain and author stats to 'mudlib_stats' package
	  . moved socket efuns to the 'socket' package
	  . moved math efuns to the 'math' package
	  . moved matrix efuns to the 'matrix' package
	* optimized eval_instruction()
	* Added the typeof() efun back in
	* added /include/type.h for return values of typeof()
	* Moved a <sys/select.h> prototype AIX complained about
	* Code for 2 byte efuns is not compiled in if there are less than
	  256 efuns, offering extra speed to those who trim their efun
	  list below 256 opcodes
	* Improved handling of efun name aliases; fixed several bugs in
	  map(), map_array(), map_mapping()
	* ({ string, string })->func() is now legal; previously only
	  objects could be used - idea from Inspiral@TMI-2

Mon Aug 29 17:47:41 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.3
	* fixed virtual objects
	* added function pointer support for:
	   filter_array( mixed *, function, void | mixed )
	   unique_array( mixed *, function, void | mixed )
	   map_array( mixed *, function, void | mixed )
	   objects( function )
	   sort_array( mixed *, function )
	* Made map_mapping work, as well as function pointer support for
	  it
	* Added map(mapping | mixed *, ...) which is what map_mapping and
	  map_array are really aliases for
	* slight change to sort_array:
	   sort_array(arr, 1) is now forward, and
	   sort_array(arr, -1) is reverse.
	   sort_array(arr, 0) is forward as well
	* LPC_TO_C compiles again; compiler still needs some of the
	   function pointer code tho
	* added new simul_efun format support to the disassembler
	* Error message for illegal local variable number with DEBUG on
	* Fixed a crasher for errors in function pointers
	* Fixed a crasher involving updating of the master object, cleaned
	   up the master object handling even more
	* "efun" and "asm" are legal argument names for functions
	   arguments again
	* Fixed a 'should be a push!' crasher when an function name was used
	   as a variable but not defined as one
	* Added changes from 0.9.19.26

Mon Aug 29 17:47:41 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.2
	* Note: This version is also based on 0.9.19.25, not v20.
	* split and reorganized the Changelogs.  Old Changelogs are now in
	  ChangeLog.old/...
	* finally remembered to remove the __builtin_valist from lint.h
	* moved the defined_named typedef to exec.h so lint.h would be
	  happy
	* Added a NO_UIDS option - Idea from Alexus@TMI-2
	  btw, the old old USE_EUID which used to always be defined
	  on MudOS drivers works with this change; so you can use:
	  simul_efun:
	    getuid(ob) {
	    #ifdef USE_EUID
	    return efun::getuid(ob);
	    #else
	    return "NONE";
	    #endif
	    }
	* Fixed miscellaneous typos etc from the function pointer merge
	* added 'make remake' == 'make neat; make all'
	* added 'make neat', which removes object files but leaves
	  .orig, .rej, driver.old, addr_server etc alone
	* moved the defined_name definition so lint.h will compile
	* added support for an array as the second argument to add_action,
	  i.e:
	        add_action( "look", ({ "look", "l", "glance" }) );
	  idea from Decker@TMI-2
	* fixed a bug that caused add_array to complain it was out of
	  memory when it really wasn't on some systems
	* fixed a bug that caused the first argument of lfun pointers
	  to be ignored
	* fixed a typo in the definition of get_simul_efuns
	* fixed a crasher with LOG_CATCHES and MUDLIB_ERROR_HANDLER
	* fixed a problem with write_prompt and process_input after
	  an error with LOG_CATCHES and MUDLIB_ERROR_HANDLER
	* fixed some indented preprocessor defines from the patching
	* Added a __MAX_USERS__ LPC define which has the value of
	  MAX_USERS in the driver
	  idea from Misery@TMI-2
	* changed the default MAX_USERS from 5 to 50
	* Changed handling of the master object:
	   - you should be able to to just about anything in your master
	     object now and it will still be updateable, even stuff like
	     efun::, even really nasty ideas like calling shadow() from
	     the master's create() or having 
	     create() { destruct(this_object()); } won't crash the mud.
	   - Errors in master compilation are actually printed now,
	     instead of a cryptic message
	   - The mud WILL NOT go down if the master object stops working;
	     all file accesses etc will simply fail.  When the master is
	     fixed the mud will resume normally.
	* indentor fixes:
	  fixed // comments
	  removed quoted array, closure etc support
	  added function datatype support

Mon Aug 29 17:47:41 EDT 1994 (tim@handel.princeton.edu (Beek))
        * raised patchlevel to v20.1
	* Note: This version is based on 0.9.19.25, not v20.
	* Name change: The 0.9 part of the version number is being dropped.
	* Large number of function pointer changes:
	* A fake frame is inserted when function calls are evaluated now.
	  The practical outcome is that previous_object() will be the
	  object that created the function pointer, not the object that
	  used it.  The object that used it is previous_object(2)
	* efun, lfun, and simul_efun pointers are now available.
	  Examples:
	  function f = (: previous_object, -1 :);
	  
	  int foo() { }
	  ...
	  function f = (: foo :);

	* arguments can be passed either by including them in the
	  definition:
	  function f = (: write_file, "/log/fp", "evaluated.\n" :)

	  or when evaluated:
	  function f = (: explode :);
	  result = (*f)("this is a test", " ");
