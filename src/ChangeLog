This file is the *brief* version of what has been changed; see
ChangeLog.alpha, ChangeLog.beta, and ChangeLog.old/ for all the gory
details.

(pre-v22.2 changes)
      * new options:
	. GET_CHAR_IS_BUFFERED
	. USE_32BIT_ADDRESSING
	. NUM_EXTERNAL_CMDS
      * features:
	. new efun: socket_status()
	. classes can be inherited multiple times so long as the definitions
	  are consistent
	. implemented MUD mode external ports
	. improved warnings for code with no side effects
	. resolve() can now take a function pointer as the second arg
	. filter() can now iterate over each character of a string
	. LPC programs can now exceed 64k in size with USE_32BIT_ADDRESSING
	. deep_inventory() and living() now default to this_object()
	. cp() now errors like mv() when source and dest are the same
	. -> syntax now uses call_other() simul_efun if one exists
	. function tables are now always compressed
	. '&' is now a synonym for 'ref' when COMPAT_32 is defined
	. added #warn and #error preprocess directives
	. when no address server connection exists, an attempt will be made
	  once every fifteen minutes to establish one.
	. (s)printf() is now re-entrant, so it can be used from the
	  object_name() master apply.
	. on most platforms, localtime() efun adds a new element to the array
	  it returns indicating daylight savings time
	. the 3rd argument to tell_room() can now be an object
	. when COMPAT_32 is defined, closeurep becomes an alias for functionp
	. added extensive socket statistics and network_stats() as a new
	  contrib efun to retrieve these stats.
	. socket_bind() now takes an optional 3rd argument that is the address
	  to bind to rather than INADDR_ANY or the 'mud ip' config address.
	. socket_address() now takes an optional 2nd argument to get the local
	  address for a socket
	. all objects now 'inherit' the class definitions from the simul_efun
	  object if there are any.
	. restructured PACKAGE_DB to make it easier to add more database
	  support
	. added support for MySQL in addition to MSQL to PACKAGE_DB
	. compile_object() master apply now gets a second argument indicating
	  whether or not a clone is being done
	. compile_object() master apply now gets arguments passed to new()
	  when cloning a virtual object as they'd be passed to create() in a
	  real object.
	. implemented rfc 1184 (telnet linemode option) to be support running
	  on port 23.
      * parser enhancements:
	. new error ERR_MANY_PATHS
	. new modifier ':c' that means just choose the first one found
	. two object rules are examined more thoroughly.  This changes the
	  semantics for direct_ and indirect_ applies.  They can now be called
	  with 0s as the object-type arguments, but it is now guaranteed that
	  they will be called with filled object arguments at least once
	  during the processing of a rule.
	. added optional 3rd and 4th arguments to parse_sentence().  The 3rd
	  is an array of objects to use in the parse instead of the inventory
	  of the user's environment.  Nested arrays indicate containment.  The
	  4th is mapping of string -> object which can be used to supply
	  nicknames and similar things.
      * COMPAT BUSTERs:
	. dump_socket_status() efun is gone, see socket_status()
	. SERVER_IP is no longer a compile-time option.  it is now a runtime
	  configuration option called "mud ip"
	. when COMPAT_32 is defined with PACKAGE_UIDS, the uid assigned to a
	  new object is the euid of the current object rather than the uid of
	  the current object.
	. when loading/cloning a virtual object, mudlib stats, uid/euid and
	  privs are now properly reset with the newly assigned object name.

(pre-v22.1 changes)
      * new options:
	. NO_SNOOP
      * features:
	. support for token quoting in the preprocessor (#x)
	. 'array' is used in error messages with ARRAY_RESERVED_WORD is on
	. added array |
	  Works analogously to &:
	  ({ 1, 2, 3 }) & ({ 2, 4 }) = ({ 2 })
	  ({ 1, 2, 3 }) | ({ 2, 4 }) = ({ 1, 2, 3, 4 })
	. both &= and |= now work with arrays
	. The requirement that a snooper must be interactive has been lifted
	  (though this isn't particularly useful unless RECIEVE_SNOOP)
	  objects may now snoop other users (logging output to logs,
	  output redirection, etc)
	. #'foo is now the same as (: foo :) when COMPAT_32 is defined
	. added a 'portbind' program; see v22.1a7 for details
	. MudOS now checks if file descriptor #6 is a valid socket when
	  it starts up; if it is, it is used as a login port.
	. support for binding a specific IP number for machines with more
	  than one
	. It is now legal to use a class member of something of type mixed,
	  as long as it is unambigous (e.g. foo->x is ok as long as only
	  one class in scope has a member named 'x', or if 'x' is in the
	  same position in all classes in scope)
	. Unused local variables now generate warnings
	. function arguments no longer need to have names (and not naming
	  them inhibits 'unused' warnings)
	. more than one access specifier (e.g. 'public private protected')
	  generates a warning
	. If SENSIBLE_MODIFIERS is defined, then:
	  (1) 'static' no longer exists, and is replaced by 'nosave' and
	      'protected'
	  (2) 'public' no longer means what it used to; it now means the
	      default visibility
	. if REF_RESERVED_WORD is defined, the 'ref' can be used to declare
	  arguments to functions to be by reference instead of by value.
	  example:
	  int foo(int ref i) {
	    i++;
    	  }
	  void create() {
	    int y = 1; foo(ref y); write(y);
	  }
	  prints '2'.  Note that ref is required both in the declaration
	  and the call.
	. added an 'efun_defined' pseudo function to the preprocessor.  It
	  works just like 'defined', except that it looks up efuns.  Example:
	  #if !efun_defined(snoop)
	     write("snoop efun not available.\n");
	  #endif
      * bug fixes:
	. hidden object fixes for present() and environment()
	. token pasting and preprocessor macro expansion
      * COMPAT_BUSTERs:
	. log_error() filenames have a leading /
	. tail() efun was removed; compat simul in compat/simuls
	. #include <...> now no longer searches based on
	  relative paths; #include "..." still does.
	. ORIGIN_CALL_OUT is now ORIGIN_INTERNAL; in addition
	  most driver callbacks which do not use hard coded function names
	  also use ORIGIN_INTERNAL (add_action, socket callbacks, etc).
	  The practical fallout of this is that such routines may be static,
	  but *not* private.
	. COMPAT_BUSTER: modifiers from a '<modifier>:' declaration only
	  affect declarations which have no modifiers of their own.  I.e.
	  'private: nomask x;' no longer declares x to be private
	
(pre-v22 changes)
      * new options:
	. NO_RESETS
	. added a COMPAT_32 option, which tweaks a few things to allow	
	  some 3.2/3.2.1 code to be ported easier
	. added REVERSIBLE_EXPLODE_STRING
	. added CALLOUT_HANDLES; see v22a28 for details.  Allows a specific
	  call_out to be tracked and removed instead of having to specify
	  the function name.
	. Added a FLUSH_OUTPUT_IMMEDIATELY option, which disables buffering
	  of output.  Useful for debugging.
      * features:
	. It is legal to define variables in foreach() statements, e.g.:
	  foreach (string x, object y in z)
	. various indexing error messages are now more information
	. many changes/improvements to the parsing package
	. added a package for running/communicating with external commands
	  (tar, gzip, etc)  See the v22a15 entry for details.
	. carriage returns are now considered white space by the parser,
	  so DOS style files don't cause errors
	. new(class X) can now specify values for the members.  Examples:
	  class foo { int x; string y; }
	  class foo f1 = new(class foo, x : 5);
	  class foo f2 = new(class foo, y : "foo", x : 1);
	. added named_livings() contrib efun, which is faster than livings(),
	  but only finds livings which have called set_living_name().
	. bind(f, ob) now always succeeds if f is already bound to ob
	. function(...) { ... } is now rebindable if it does not reference
	  local functions or global variables
	. the message of message() may be of any type
	. replaceable now can be optionally passed a second array argument
	  which is a list of function names to ignore; if the second arg
	  is left out, ({ "create" }) is assumed, which gives the old
	  behavior.
	. made the message queue flushing a bit lazier which should result
	  in smoother output and larger packet sizes
	. added a flush_messages(void | object) efun for manually flushing
	  message queues (during a long thread of execution, for example)
	. \012 octal codes and \x1e hex codes are now allowed in string
	  and character constants
	. added a classp() efun
	. fixed sort_array() to work correctly when called from inside
	  itself
	. added repeat_string() contrib efun.  Example:
	  repeat_string("-=", 10) == "-=-=-=-=-=-=-=-"
	. added a memory_summary() contrib efun, which returns a mapping
	  of with entries: map["program name"]["variable name"]
	  Each entry contains the number of bytes used by that variable in
	  all active instances of that program.  The size of shared structures
	  is divided up evenly between all values that reference it.
	. terminal_colour() now has two more optional args; the 3rd is the
	  width to wrap at, and the 4th is the indent for lines after the
	  first
	. characters in user input with the 8th bit set are no longer ignored
	. function_exists(string, object, flag); if flag is nonzero, private
	  and static functions are checked too.
	. SIGUSR2 will now cause the driver to eval out immediately
      * optimizations:
	. sprintf() is about 3 times faster than it used to be
	. optimized present(), terminal_colour()
	. call_out() is now O(1), not O(n)
	. function tables are sorted, so they can be searched in O(log n)
	  time instead of O(n).  Speeds up call_other(), function_exists(),
	  etc.
      * memory usage:
	. fixed leaks in call_out(), illegal arguments to call_stack(),
	  errors in id()
	. function overhead is now 15 bytes per function defined and 5 bytes
	  per function inherited, not 14 bytes for both.  Typically cuts
	  function memory usage in half or more, also:
	. if COMPRESS_FUNCTION_TABLES is defined, the function tables are
	  compressed even further (estimated compression: 2-3x) at the cost
	  of slowing down function calls slightly (seems to be <10%)
	. variable information is now stored only in the program in which
	  the variable is defined; estimated compression ratio is about
	  10:1 on typical libs
      * bug fixes:
	. testsuite now compiles with almost any option settings
	. sprintf()'s %O handles recursive structures gracefully
	. many fixes to center/left justification in sprintf
	. function arguments and variables no longer may be of type 'void'
	. leading and trailing whitespace in the config file is now ignored
	. switch (...) { case 0: function() { break; }; },
	  while (...) { function() { continue; }; },
	  while (...) { e = catch { break; } }
	  and similar pathological code is no longer allowed.
	. message() now behaves correctly when called from inside 
	  recieve_message() [i.e. recursively]
	. a number of changes to $() notation.  See v22a38.
	. several fixes to sscanf(): format strings ending in %, %% as
	  the last pattern
	. fixed socket_close() to not close sockets immediately when data
	  is buffered internally; this adds a new socket state 'CLOSING'
	  which will transparently change to 'CLOSED' when the data has
	  been written.
	. cleaned up the disk full logic a bit; also added error checking
	  on the fclose(), which apparently the call that usually errors.
	  should prevent .o files from getting lost when the disk is full
	. fixed read_file() to return "" and not 0 for zero-length files
	. sending a SIGUSR2 to the mud will now cause it to eval out; temporary
	  fix until eval_cost gets rewritten.
	. sscanf() no longer errors on some legal uses of %%
      * crasher fixes:
	. removing heart_beats during a heart_beat()
	. lots in the parsing package
	. extremely long tables in sprintf(), negative field widths, etc,
	  etc, etc
	. recursive structures in error traces
	. function_owner()
	. unterminated @ and @@ blocks
	. some too deep recursion errors
	. mapping composition
	. quite a number of other rare ones
      * COMPAT_BUSTERS:
	. previous_object() is now 0 in heart_beat()
	. the scope of variables defined in for() and foreach() is inside
	  the loop ONLY; it used to extend to the end of the function
	. "%^" is no longer considered "special" by sprintf(); see
	  terminal_colour() if you want to wrap strings containing it.
	. removed break_string(), process_string(), process_value().
	  See compat/simuls/ for replacements
	. call_stack(3) now uses strings, like origin()
	. call_out_info() elements now have only 3 elements,
	  not 4; this is due to argument handling restructuring, as well
	  as mild security concerns for reference types.  Maybe an option
	  will be added to get the arguments at a latter date if it is
	  desired.
	. all inherits must now precede all global variable definitions
	. Added slashes to the front of many object/program names.  The most
	  noteworthy are: deep_inherit_list(), inherit_list(), call_stack(),
	  names passed to author_file(), domain_file(), privs_file(),
	  creator_file(), a few error messages and tons of debug messages
	. The third argument passed to valid_override() now has a leading
	  slash
	. The filename passed to compile_object() has a leading slash

