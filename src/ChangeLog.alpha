---------------------------------------------------------------------------
(v21.3a7 promoted to v21.3b1)

Tue Apr 25 15:43:47 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a7
	* updated with respect to v21.2b8
	* added Robocoder's optimization to read_buffer()
	* fixed alot of things gcc -Wall complained about
	* fixed a crasher in disassembling code involving classes
	* fixed type checking to not give an error for missing type
	  for arguments when type checking is off
	* fixed a bug which could cause type errors in non-type checked
	  functions, especially wrt 'return x;'
	* fixed a problem that would cause edit_source -configure to run
	  on every make
	* check return values and report file errors in edit_source -malloc
	* configure checks for <sys/sysmacros.h>, and <bstring.h> if DEBUG
	  is on (sgi prototypes for bzero, which is used by FD_ZERO is there)
	* only add -lmalloc if malloc() isn't in a standard library
	
Tue Apr 25 15:25:06 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a6
	* fixed misoptimizations of nullp() and undefinedp()
	* fixed a bug in array subtraction, intersection, and other
	  operations (next person who uses & when they mean == will be
	  shot)
	* fixed two typos in the build.MudOS script

Sun Apr 23 18:53:24 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a5
	* updated with respect to v21.2b7
	* fixed a bug in the STRFUNCS check in ./build.MudOS
	* fixed some compilation problems with string functions and
	  DEBUGMALLOC

Sat Apr 22 21:38:11 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a4
	* fixed some compilation problems with DEBUGMALLOC tags in function
	  calls
	* fixed a typo in the T_REFED optimization that would cause the
	  gamedriver to crash right after booting
	* fixed save/restore of classes
	* fixed reclaim_objects() to correctly handle destructed objects
	  as mapping keys; the equivalent of map_delete() is now done
	  on them
	* optimized free_string() with some ideas from Armand@TMI-2

Fri Apr 21 02:06:38 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a3
	* updated with respect to v21.2b6
	* optimized free_svalue() and assign_svalue_no_free() by
	  handling all refed objects similarly and saving a switch()
	* fixed some compilation problems in interpret.c
	* fixed some of the tagged routines to depend on DEBUGMALLOC,
	  not DEBUG
	* fixed the external declaration of svalue_strlen_size

Tue Apr 11 12:23:36 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a2
	* updated with respect to v21.2b5
	* fixed a variable name clash (type_names) between interpret.c and
	  compiler.c
	* edit_source -configure now checks for the existence of strerror()
	  for better POSIX compatibility
	* fixed catch() to work from LPC->C code
	* if the compiler found is 'cc', check if it is gcc and if so use
	  gcc's optimization flags
	* MAX_USERS no longer exists; instead, space is allocated as needed.
	  a limit should probably be enforced by the mudlib to avoid running
	  out of file descriptors ...
	* new efun alias: this_user() == this_player()
	* compile hash.o with optimization since it is used in the main
	  driver as well as edit_source
	* added an optional flag to the functions() contrib efun:
	  functions(object, 1) returns:
	  ({ "function_name", num_arg, ret_type, arg1type, arg2type, ... })
	  where the types are the type numbers given by typeof()
	* COMPAT BUSTER: map_mapping now passes the value, not the key,
	  to the function pointer.
	* evaluate() and apply() now return 'mixed' and don't need casting
	  with CAST_CALL_OTHERS defined
	* rewrote malloc'ed strings to be ref counted and remember their
	  lengths.  This gives a factor of 2-5 speed gain on many string
	  operations at the cost of 4 bytes of memory per string.  However,
	  the reference counts means that malloc'ed strings are not duplicated
	  when copied, so despite the new overhead, many muds may see a
	  reduction in memory used by strings.  Note: If you are trying
	  to test this, note that check_memory() and mud_status() now
	  report ALL memory used by strings; previously only the memory
	  used by shared strings was reported, the memory used by malloc'ed
	  strings wasn't reported anywhere.
	* made strings statistics optional since they can have an impact
	  on the speed of string operations.
	* driver guru info:
	  where you used to do:          now do:
	  x = (char *)DXALLOC(n+1, ...   x = new_string(n, "foo")
	  FREE(x)                        FREE_MSTR(x)
	  x = DREALLOC(x, ...            x = extend_string(x, ...
	  strlen(shared_string)          SHARED_STRLEN(shared_string)

	  note that string_copy() now returns a ref'd, counted string.
	  if you really do just want a copy of an area as a normal
	  allocated block, see alloc_cstring()

	  Also, it isn't safe to assume you can write into a malloc'ed
	  string now.  See unlink_string_svalue() if you need to do it.
	* optimized explode() and implode() to use SVALUE_STRLEN to
	  find the length of their arguments
	* removed some unused ed flags
	* added a new ed set option 'verbose' which shows number of lines
	  and bytes in files, etc
	* added a check not to add -lcrypt if crypt() is defined in libc.a

Tue Apr 11 00:36:00 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.3a1
	* updated with respect to v21.2b3
	* successfully compiled and ran the driver with all loaded objects
	  compiled into the driver (LPC->C); the only things that may not
	  work are catch() and defining functionals/expression pointers
	  (although calling function pointers will work fine)
	* fixed a typo in the type checking code generated for to_float/to_int
	  (LPC->C)
	* precompiled objects now depend upon binaries which are saved with
	  the .B extension so they don't conflict with normal binaries
	* fixed in generation of the following LPC->C code:
	  . while (i--) ...
	  . for or while (x < y) ...
	* added support for (--x), (++x), void_assign_local, x--, (-x), (~x),
	  x[<y], (: ... :) in LPC->C compiled code
	* generate_source() now sends precompiled objects into a mudlib/
	  subdir of the binaries dir if passed an array of files, and
	  creates multiple source files there instead of one huge source
	  file.  The mudlib/ dir can be copied unchanged into the driver
	  source dir and compiled.
	* removed support for ALWAYS_SAVE_COMPILED_BINARIES
	* made the output of lpc_info() more readable
	* F_WHILE_DEC now uses up one less byte
	* removed an unused version of find_status()
	* fixed a bug in sprintf's column option that would omit a character
	  if a line was too wide

----------------------------------------------------------------------------
Thu Mar 30 15:45:30 EST 1995
	* promoted to beta status (see v21.1b1)
	* updated with respect to v21
	* Two new contrib efuns:
	  . void store_variable(string name, mixed value)
	  . mixed fetch_variable(string name)
	  These can be used for simulating set(), implementing debuggers,
	  etc:
	       foo = bar <-> store_variable("foo", bar)
	       return foo <-> return fetch_variable("foo")
	  set(string foo, mixed bar) {
	      switch (foo) {
	      case "name": case "hp":
	            store_variable(foo, bar);
	            break;
	      default:
	            ...
	* fixed a number of typos/problems with the Makefile/GNUmakefile
	  that would cause compilation to fail
	* Added an option to have up to 5 external ports
	  These can be specified in the config file.  The format is:
	  external_port_x : kind #
	  where x is 1, 2, 3, 4, 5; kind is telnet, binary, or ascii
	  and # is the port number.  For compatibility, the line:
		mud port : 5555
	  is the same as
		external_port_1 : telnet 5555
	  'telnet' ports act the same as previously.  'ascii' ports
	  send no telnet characters, and don't do any interpretation of
	  the text they receive except to pass it one line at a time
	  to process_input().  'binary' ports act very much like 'ascii'
	  ports, except that buffers are passed to process_input()
	* Added in a fix from Robocoder for using smalloc or bsdmalloc
	  with debugmalloc or wrappedmalloc; previous smalloc or bsdmalloc
	  was erroneously ignored and sysmalloc used
	* Added in a fix from Jeearr for build.MudOS which would cause
	  it to die if GNU make wasn't present
	* optimizations:
	    return 0 is now 1 opcode
	    loop conditions involving <
	    multiple pushes in a row compressed into a quick format
	    x == y, !(x != y), x < y, !(x >= y), x > y, !(x <= y),
	    x != y, !(x == y) in if statements and ( ? : )
	    !x, x==0, etc in ( ? : )
	* connect() is now passed the port # to which the user connected
	* reworked rc.c a bit
	* changed all the references to NO_UIDS to PACKAGE_UIDS; this was
	  causing compilation to fail with NO_UIDS off
	* re-indented interpret.c
	* fixed compilation of functions(), replaceable() and pluralize()
	  (contrib)
	* COMPAT_BUSTER: "efun", "new", and "asm" are no longer valid
	  function/variable names
	* all type names are now valid in foo::bar
	
Fri Mar 24 20:59:08 EST 1995 (tim@handel.princeton.edu (Beek))
	* bumped patchlevel to v21.2a6
	* updated with respect to v21.1b7
	* The build procedure has changed drastically:
	  (1) edit the top of build.MudOS to configure a few things.
	      You should only have to do this if you have an obscure
	      operating system or want to change INSTALL_DIR, etc
	  (2) "./build.MudOS"
	      The script will munge for a while, then print out the
	      configuration it determines.
	  (3) if you don't like what build.MudOS decided, edit the top
	      of Makefile/GNUmakefile.
	  (4) type make/gmake, as appropriate
	  (5) type make install, or move the binary to whereever you want it
	* technical details:
	  The build process goes more or less as follows:
	  (1) ./build.MudOS determines enough system parameters to allow the
	      compilation of edit_source
	  (2) edit_source is built, then run to process options, configure
	      malloc, create various makefiles and check which libraries
	      and include files exist
	  (3) Makefile.MudOS is then executed in order to build the main
	      driver executable
	* stage (2) of the compilation is run with optimization off, as
	  edit_source takes longer to compile than to run ...
	* Both GNUmakefiles and Makefiles are generated from a common file.
	  developers should edit Makefile.master and then run 'make Makefiles'
	  if changes to the build process are wanted.
	  (This was actually added last pl, but now applies to 3 makefiles)
	* modified terminal_type negotiation to comply with the relevant RFC's;
	  this may increase the number of systems it works with.
	* added NAWS window size automatic negotiation; the callback is:
	  void window_size(int width, int height)
	* optimized the pushing of call_out arguments
	* added a missing prototype for c_generate_node()
	* fixed/kludged errors in #include to report the right line number
	* renamed DISALLOW_BUFFER_TYPE to NO_BUFFER_TYPE

Wed Mar 22 23:37:55 EST 1995 (tim@handel.princeton.edu (Beek))
	* bumped patchlevel to v21.2a5
	* added a mudlib/ directory to hold LPC->C compiled code
	* mudlib/ and packages/ compilation now use libaries to
	  avoid packages/*.c kludges and the like
	* added Symmetry's diffs to allow for recursive class definitions,
	  allowing linked lists, etc to be constructed
	* packages are now specified in options.h instead of fooling with
	  func_spec.c.  This will work for any package, even ones not
	  included with MudOS (PACKAGE_AURORA, for example, will automatically
	  compile and use packages/aurora.c and packages/aurora.spec)
	  in addition, a #include in func_spec is no longer necessary
	* removed all references to the MIRE package
	* in the driver source:
	     NO_MUDLIB_STATS -> !PACKAGE_MUDLIB_STATS
	     SOCKET_EFUNS    -> PACKAGE_SOCKETS
	* Fixed a number of instances where messages including filenames
	  had no leading '/'
	* added F_VOID_ASSIGN_LOCAL: x = ... is now a single opcode
	* applied Robocoder's fix for a problem where 'continue' would
	  get confused in nested loops
	* removed some useless code from F_VOID_ASSIGN
	* removed make_malloc and make_func and replaced them with
	  edit_source; cleaned up the associated code
	* added preprocess.c which centralizes some of the code used by
	  both lex.c and edit_source.c; more work needed here.  Unfortunately,
	  it has to be #included since edit_source.c can't stand MALLOC
	* COMPAT_BUSTER: removed a bunch of LPC predefines
	    SAVE_EXTENSION:  use __SAVE_EXTENSION__
	    USE_EUID:        use ! __NO_UIDS__
            HAS_BUFFER_TYPE: use ! __DISALLOW_BUFFER_TYPE__
	    HAS_SOCKETS:     use __PACKAGE_SOCKETS__
	    HAS_SHADOWS:     use ! __NO_SHADOWS__
	    HAS_DEBUGMALLOC: use __DEBUGMALLOC__ && __DEBUGMALLOC_EXTENSIONS__
	    HAS_MATH:        use __PACKAGE_MATH__
	    HAS_PROFILE_FUNCTIONS:  use __PROFILE_FUNCTIONS__
	    HAS_MATRIX:      use __PACKAGE_MATRIX__
	    HAS_PRIVS:       use __PRIVS__
	    HAS_EACH:        use __EACH__
	    HAS_CACHE_STATS: use __CACHE_STATS__
	    HAS_OPCPROF:     use __OPCPROF__
	    HAS_MUDLIB_ERROR_HANDER: use __MUDLIB_ERROR_HANDLER
	    HAS_MUDLIB_STATS:use ! __NO_MUDLIB_STATS__
	    HAS_LIGHT:       use ! __NO_LIGHT__
	* removed the debugging code from the identifier hash table code
	  since it appears to be bug free
	* fixed a crasher in Robocoder's config file fix when lines were
	  missing from the config file
	* consolidated some of the error reporting code
	* both GNUmakefile and Makefile are now generated from Makefile.master
	  via GNUmakefile.pre and Makefile.pre; one side effect of this is
	  that you can use 'make Makefiles' to return your Makefile to
	  it's unedited state
	* fixed a crasher in objects dested from some socket callbacks
	  
Sun Mar 19 02:32:56 EST 1995 (tim@handel.princeton.edu (Beek))
	* bumped patchlevel to v21.2a4
	* updated with respect to v21.1b6
	* REALLY added in the diffs from v21.1b5 (I forgot to run patch
	  last patchlevel)

Sun Mar 19 02:32:56 EST 1995 (tim@handel.princeton.edu (Beek))
	* bumped patchlevel to v21.2a3
	* updated with respect to v21.1b5

Sat Mar  4 16:14:17 EST 1995 (tim@handel.princeton.edu (Beek))
	* bumped patchlevel to v21.2a2
	* updated with respect to v21.1b4
	* fixed compilation with #undef OLD_ED (object_ed_output() changed
	  to global scope; it's used by regexp_error())
	* fixed a bug that would incorrectly claim filenames had // in them
	  on some operating systems
	* changed the above error message to say what the filename was :)
	* COMPAT_BUSTER: privs_file is now called to get new privs for
	  virtual objects which are loaded.  This is a bit of an oddity;
	  virtual objects actually get created twice, so it's hard to say
	  what should be done when.  Possibly, mudlib_stats should be
	  also be reinitialized.  Currently, they behave the same way
	  as the object returned from compile_file() which is inconsistent
	  with their filename (which was the old behavior of PRIVS as well)
	  The same problem exists with UIDS.  This may change in the future.

Sat Mar  4 16:14:17 EST 1995 (tim@handel.princeton.edu (Beek))
	* v21.2a1 created from v21.1b3
	* added code to not generate unreachable code in LPC->C generation
	  since SGI cc is very noisy about that and it happens alot.
	* protect special characters string constant case labels with '\'
	  when generating switch tables (LPC->C)
	* fixed a cases for int switches to use the correct field (LPC->C)
	* added more name mangling for switch table names so they don't
	  collide (LPC->C)

----------------------------------------------------------------------------
Wed Mar  1 18:14:01 EST 1995 (tim@handel.princeton.edu (Beek))
	* v21.1a5 promoted to beta status (see v21.1b1)

Fri Feb 24 23:48:38 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.1a5
	* brought up to date with respect to v21b15
	* MASSIVE source cleanup
	  . 'arrays' are always refered to as arrays and never vectors/pointers
	  . all types now use foo_t syntax instead of struct foo 
	  . several header files cleaned up and includes reorganized
	  . removed internal distinction between internal and external
	    programs (i.e. foo->p.i.bar is now foo->bar)
	* centralized the processing of "/foo/bar.c" -> "foo/bar"
	* removed support for RUNTIME_LOADING
	* removed support for #undef NEW_FUNCTIONS
	* in addition to the above, call_other pointers are gone.
	  (: x, y :) should be converted to (: call_other, x, y :)
	  the functionality remains unchanged, since that's all they really
	  did ...
	* function pointers reorganized to use less memory (the size is
	  now variable based on the ammount of space needed, so a lfun
	  pointer can be significantly smaller)
	* added OPCPROF_2D which keeps statistics on the most commonly
	  executed *pairs* of instructions
	* regexp errors in regexp efuns now use error(), instead of printing
	  a message to this_player() which eroneously refers to ed ...
	* LPC_TO_C now works for compiling objects into the driver.
	  (1) make sure #pragma save_binary is on in all objects to be compiled
	  (2) do a generate_source( <array of filenames> )
	  (3) copy /binaries/interface.c into your source dir (replacing the
	      provided one)
	  (4) recompile the driver
	  (5) the lpc_info() efun can be used to see if the new programs are
	      being used; other than that there should be no visible
	      difference, other than speed.

Wed Feb  15 00:16:55 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.1a4
	* brought up to date with respect to v21b10
	* optimized the handling of the redefinable keywords 'efun', 'asm',
	  and 'new'
	* Floats and ints are now automatically interconverted in the
	  following cases:
	  . Passing an int to a efun that takes a float and not an int, and
	    vice versa.  Hence, sqrt(5) is legal.
	  . during initialization (as in float x = 5)
	  . Note: the above depends on compile time checks so if you exploit
	    mixed, etc to put an int in a float variable it will misbehave
	* added limited support for classes (no member functions):
	  . structure definitions are stored in programs, which means they
	    can be passed down via inheritance

	  . definition of the type is as follows:
	    class <class_name> {
              <type> <member>;
              ...
            }
	    Ex: class my_first_class { int my_number; string my_string; }

          . declaring a variable of that type:
            class <class_name> <var_name>;
	    Ex: class my_first_class my_var;

	  . instantiating a class:
	    <var_name> = new(class <class_name>);
	    Ex: my_var = new(class my_first_class);
	
          . assigning to/using a member
            <var_name> -> <member> = whatever ...	
	    Ex: my_var->my_string = "It worked!";

Thu Feb  2 00:16:55 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.1a3
	* brought up to date with respect to v21b8
	* fixed the define used by cfuns.h to be different from the one
	  ccode.h used
	* generate_source() now returns zero if there were compilation errors
	* modified lower_case() to be slightly more portable and easier to
	  read
	* inlined sapply() into apply() and apply_master_ob() by hand
	* fixed a unrecognized #pragma crasher (the list wasn't terminated)
	* fiddled with the default settings of options.h
	* new contrib efuns:
	  string pluralize(string)
	  int file_length(string)
	  string upper_case(string)

Thu Feb  2 00:16:55 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.1a2
	* brought up to date with respect to v21b7
	* added prototypes for all the c_* functions in ccode.c
	* fixed the Makefile and GNUmakefile; removed obsolete files
	* fixed generate_source() to use 'package fname;' instead of
	  'package lpc_to_c;' when outputting to 'fname.c' and 'fname.spec'
	* removed support for add_action(string); all it did was cause
	  errors anyway ...

Thu Feb  2 00:16:55 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v21.1a1
	* brought up to date with respect to v21b5
	* COMPAT_BUSTER: removed the following options.h defines and 
	  related behavior: OLD_HEARTBEAT, OLD_COMMAND, IGNORE_STRICT_PRAGMA
	* COMPAT_BUSTER: STRICT_TYPE_CHECKING removed, use 
	  PRAGMA_STRICT_TYPES as a default pragma
	* COMPAT_BUSTER: ALWAYS_SAVE_BINARIES removed, use 
	  PRAGMA_SAVE_BINARY as a default pragma
	* COMPAT_BUSTER: move_object only takes 1 argument.
	  change move_object(this_object(), foo) to move_object(foo)
	* LPC->C restored to working condition in a limited sense:
	  . new pragma #pragma efun ignored during regular compiling
	  . generate_source("source_file.c", "destination_file.c")
	    will compile "source_file.c" into an efun package made
	    up of "destination_file.c" and "destination_file.spec"
	    which can be linked into the driver
	  . note that it is illegal to do the following in an efun:
	    - call a local function -> this really can't be done
	    - call a simul_efun -> see above.  Use efun:: to get around
	      write simul_efuns, etc; the driver won't complain about
	      illegal overrides while generating efun source
	    - use a global variable -> wait for future fixes
	  . LPC->C for objects doesn't work as of this release; only
	    creation of efuns in packages (useful for efunizing simuls)
	  . various things not supported yet; most notably functionals,
	    also string switches are supported but buggy; let me know
	    if you have other problems (esp. linking errors)
	* added some internal stuff for structures; work in progress.
	  ignore the 1 shift/reduce conflict as it won't affect normal
	  LPC code.
	* define_new_function() doesn't take the offset any more; this
	  is set explicitly where needed (2 places)
	* argument types are actually saved why #pragma save_types is
	  used.  They still aren't used yet tho.
	* the format of switch parse trees was tweaked a bit to help
	  LPC->C compilation
	* removed some unused i_generate_* functions
	* push_indexed_lvalue in interpret.c is no longer static; compiled
	  C code needs it
	* removed call_absolute()
	* removed optimization flag, as it was unused
	* rewrote pragma handling to work off of a table for easier addition
	  of pragmas
	* added #pragma no_whatever which turns off the effect of
	  #pragma whatever
	* added program argument types to md.c's list of permanent blocks;
	  not checked for leakage yet tho
	
