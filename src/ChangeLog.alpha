Sat Mar 31 17:02:08 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v23a5
	* updated with respect to v22.2b11
	* #121: Fixed macro expansion token pasting [reported by
	  Arren@Anarres II]
	* #130: Quoted strings containing @ expand to @@ [fix from
	  Arren@Anarres II]
	* #134: Expansion of empty definitions gives garbage [fix
	  from Arren@Anarres II]
	* #25: Added support for MCCP (Mud Client Compression
	  Protocol).  The changes were initially based on Pinkfish's
	  patches as submitted to mudos-patches@mudos.org, however
	  they've been heavily modified and mostly rewritten.  If you
	  want this support, you'll need zlib installed and you'll
	  need to enable MCCP_SUPPORT in your local_options.  Note
	  that it is NOT enabled by default.
	* #150: New configuration option: escape characters.  See
	  the comments in Config.example for more information.  This
	  is a required option [changes based on patches from
	  Pickett@Sumu]

Thu Nov 16 17:51:37 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v23a4
	* updated with respect to v22.2b9
	* #94: fix a crasher in name resolution when making a request
	  via resolve() [reported by Pickett@Sumu]
	* #93: fix a crasher expanding macros when there is no
	  expansion text [reported by Pickett@Sumu]
	* fixed a problem with recursive macros not expanding as they
	  should [found as a result of a misunderstanding of what
	  Pickett@Sumu was trying to report as a crasher]
	* #108: Corrected the ed() simul_efun to bind callbacks to the
	  proper object rather than the simul_efun object [reported by
	  Randor@Aurora]
	* OLD_ED has been removed.  See the compatibility LPC code in
	  the compat directory.
	* ed_start() can now take a callback to be made for before and
	  after a write is done, just like ed() used to.  Additionally,
	  this callback can be either a function or a string.  If it's
	  a string, it'll call that function in the object that called
	  ed_start().
	* #95: Fixed token quoting in macro expansion [reported by
	  Loriel@LimaBean]
	* Completely restructured the compat directory.  The rework
	  was done to allow for greater ease in providing the code to
	  replace much driver functionality, much of which has not
	  yet been removed.

Wed Sep 27 08:25:44 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v23a3
	* updated with respect to v22.2b8
	* #87: Don't generate a pulse as soon as the driver boots.
	  The current_time value is the same for the first two pulses
	  otherwise.  This makes more sense and also removes the need
	  for the hack added in a previous revision to handle pulses
	  properly when a runtime error occurs during one.
	* #89: Optimize filter_array() from running in O(n^2) to O(n).
	  It's still slower than foreach() is though.  [patch from
	  Pelle Johansson]
	* #82: Added __LINE__ predefine.  Expands to the current line
	  number [based on a patch from Andrew@Nanvaent]
	* lex.c now uses outbuffer_t for macro expansion so that macro
	  expansions are now done dynamically and allow for expansions
	  up to USHRT_MAX.
	* macro expansion in the lexer should be even better now, even
	  better respecting ANSI rules.  It's still off a bit, but it
	  is getting much closer.  i've completely rewritten it (again)
	  so it may be somewhat buggy
	* COMPAT BUSTER: token pasting (##) now works only when doing
	  macro expansion
	* split out address server handling code from comm.c into its
	  own addr_client.c.  in doing so, consolidated, optimized and
	  repaired the code:
	  . there is now a single function to make a request rather
	    than two duplicating the work.
	  . when the address server goes away, callbacks are made for
	    all pending requests indicating failure and the requests
	    are purged
	  . with DEBUGMALLOC_EXTENSIONS defined, pending requests are
	    marked properly
	  . when searching for a pending request table entry to fill,
	    clean out destructed objects waiting for a request.
	  . when an address is received, loop through the pending
	    request table only once rather than twice.
	  . increased in/out buffers to 2048 from 200/100 respectively
	  . sending a request to the server is now signal safe
	* rather than spark another religious war, reclaim_objects()
	  has been added back as an efun.  It is once again the lib's
	  responsibility to do garbage collection.

Thu Sep 21 15:52:55 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v23a2
	* updated with respect to v22.2b7
	* Fixed some minor errors in LPC efun equivalent code
	* Created PACKAGE_OBSOLETE.  This package will contain some of
	  the efuns that have been and will be removed from MudOS.  It
	  won't have all of them, but the ones that have no dependency
	  on other parts of the driver will be there.  This package is
	  completely unsupported.  The code may break at any point,
	  and it won't be fixed.  I will reject bug reports on it, etc.
	  Use at your own risk.  So far the following efuns are in the
	  package:
	  . message, printf, say, shout, tell_object, tell_room, write
	  . reclaim_objects
	* USE_32BIT_ADDRESSES is always defined now.  If you've got
	  LPC_TO_C defined, it doesn't matter anyway since it's always
	  used for that.  It should be pretty stable, and if it isn't,
	  now is the time to find out and work thru the problems.
	* GET_CHAR_IS_BUFFERED is always defined now.  If you're not
	  using it, it shouldn't make any difference to you whether it
	  is on or not.  Shouldn't have been an option in the first
	  place.
	* With OLD_ED defined, ed() can take two args with the second
	  being an int indicating restricted or not.  It can also take
	  a single argument that is an int indicating restricted or
	  not.
	* #74: Added runtime configuration option for address server
	  reconnection timeout.  See Config.example for details. 
	  [suggested by Troels Therkelsen]
	* #61: Added set_pulse() efun to set the pulse interval.
	  Setting the pulse to 0 disables it.
	* Added database support for PostgreSQL.  100% completely
	  untested.  Use at your own risk.  NOTE: It does not fully
	  support binary cursors.  Someone want to contribute the code
	  to support that ...?

	BUG FIXES:
	  . #69: Fixed crashers with living related efuns by initing
	    the living hash table at startup [reported by
	    Skullslayer@RoD]

	COMPAT BUSTERS:
	  . reclaim_objects() has been removed (it is in the obsolete
	    package if you still insist on calling it) because object
	    collection is done automatically now.  Where I've added
	    the collection could get expensive on large muds, so it may
	    very well get changed if it is a problem.
	  . PACKAGE_MUDLIB_STATS has been completely removed.  There is
	    no LPC equivalent.
	  . NO_WIZARDS option has been removed.  This means that the 3
	    efuns it enabled (enable_wizard, disable_wizard, wizardp)
	    are also gone.  With OLD_ED and RESTRICTED_ED defined, ed()
	    will not automatically make non-wizard sessions restricted.
	    All of this can be simuled, see compat/simuls directory.
	  . NO_IP_DEMON is no longer supported.  Specify -N on the
	    driver command line to disable address server support.

Thu Aug 31 05:55:55 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v23a1
	* Existing/incomplete/unsupported/broken WIN32 support has been
	  completely removed from the source tree.  It will be redone
	  completely in an upcoming release.
	* Started moving unnecessarily duplicated code into single
	  functions.  Some code will remain duplicated for performance
	  reasons.
	* The set_this_player() efun is always compiled in now.  It's
	  It's needed for the LPC equivalents of some removed efuns.
	* The receive() efun will now call add_message() for non-
	  interactive objects (nop if NONINTERACTIVE_STDERR_WRITE is
	  not defined).

	COMPAT BUSTERS:
	  . Numerous efuns have been removed.  There are LPC equivalents
	    for each in the compat/simuls directory.  Please note that
	    not all of the supplied LPC code has been fully tested.  You
	    will need to modify it to make it work with your mudlib.

	    The efuns that have been removed are:
	    - call_out, call_out_info, find_call_out, remove_call_out
	    - message, printf, say, shout, tell_object, tell_room, write
	    - heart_beats, query_heart_beat, set_heart_beat
	  . Binary support is always compiled in now since there is no
	    longer any additional overhead involved.  If you don't want
	    binaries, simply define valid_save_binary() in your master
	    object to unconditionally return 0.
	  . Several options from options.h have moved to the runtime
	    configuration file.  They are: CFG_EVALUATOR_STACK_SIZE,
	    CFG_MAX_LOCAL_VARIABLES, CFG_LIVING_HASH_TABLE_SIZE,
	    CFG_MAX_CALL_DEPTH and MAX_SVALUE_SAVE_DEPTH.  Please See
	    Config.example for the configuration file settings.
	  . Several options from options.h have been completely removed.
	    They are: BINARIES, CALLOUT_HANDLES, CALLOUT_CYCLE_SIZE,
	    THIS_PLAYER_IN_CALL_OUT, SMALL_STRING_SIZE,
	    LARGE_STRING_SIZE, HEARTBEAT_INTERVAL, HEART_BEAT_CHUNK
	  . heart_beats and call_outs have been replaced with a pulse
	    mechanism.  A runtime option is available to set the pulse
	    interval.  Each interval, pulse() will be called in the
	    master object.  See pulse.c along with simuls/call_out.c
	    and simuls/heart_beat.c in the compat directory to see how
	    to implement heart_beat and call_out in your mudlib.

-------------------------------------------------------------
(v22.2a37 promoted to v22.2b1)

Sat Jul 29 21:32:05 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a37
	* updated with respect to v22.1b32
	* fixed miscellaneous typos and compile errors in a36
	* moved most all add_action code into add_action.c
	* corrected db_connect in PACKAGE_DB to take only four
	  arguments rather than five.
	* strings in PACKAGE_DB are now malloced/counted rather
	  than shared [suggestion from Beek]
	* fixed a memory overwrite crasher in handling prototypes
	  of inherited functions [reported by Zifnab, Loriel,
	  Mystic, and others.  thanks to Javelin@VH for a test
	  case to reliable reproduce]
	* Fix error messages generated when PACKAGE_UIDS is defined
	  and get_root_uid() or get_backbone_uid() either do not exist
	  in the master object or do not work.  Error messages were
	  causing a crash [reported by Mystic]

Fri Jul  7 21:16:16 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a36
	* updated with respect to v22.1b31
	* fixed process_input() so that the modified command is passed
	  on to parse_command() rather than the original unmodified
	  [reported by Beyond@LimaBean]
	* added debug code for tracing object references and finding
	  destructed objects that never get freed.
	* fix receive_snoop() to handle non-nul terminated buffers
	  passed -- use the len argument [reported by Passerby@IoT]
	* prepend slashes to filenames for display in ed (f, w, x
	  commands) [reported by Avenger@AtP -- missed from v22.1b25]
	* implemented rfc 1184 (telnet linemode option) to better
	  support running on port 23.  the implementation is partial
	  at present, but sufficient to serve its purpose.

Tue Jul  4 19:45:03 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a35
	* updated with respect to v22.1b30
	* fixed escape_command() so that ! command escaping
	  works again.
	* if there's no master object present when attempting a
	  virtual object clone (shouldn't ever happen, but ...),
	  be sure to clean up the stack before returning failure
	* removed recently added debug checks for destructed
	  objects pushed onto/assigned into the stack.

Sun Jul  2 19:00:55 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a34
	* updated with respect to v22.1b29
	* fixed lower_case() and upper_case(), both broken in a32 by
	  locale changes
	* updated PACKAGE_DB support to include MySQL support and
	  restructured to ease adding new database support [based on
	  patches from Andrew@Nanvaent]
	* COMPAT BUSTER: When loading/cloning a virtual object, mudlib
	  stats, uid/euid and privs are now properly reset with the
	  newly assigned object name.
	* compile_object() in master.c will now be passed a second
	  argument indicating whether the operation is a clone or not.
	* If arguments are now passed to clone_object() for create() when
	  cloning a virtual object, the arguments will be aggregated and
	  passed on to compile_object() in master.c as the third arg.
	  The prototype for compile_object() is now as follows:

	  varargs
	  object compile_object(string filename, int cloning, mixed args...);
	* Don't bail out of edit_source if PACKAGE_DB is defined and it
	  can't find msql.h, mysql.h, libmsql.a, or libmysql.a.  If they
	  can't be found, you'll have to hack the source for now.

Sat Jul  1 13:18:19 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a33
	* don't save command_giver on the runtime stack.  use a separate
	  stack instead.
	* add missing add_ref in save_command_giver() to match the
	  free_object() in restore_command_giver()

Tue Jun 20 18:41:51 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a32
	* updated with respect to v22.1b28
	* for the network_stats() contrib efun, return the external ports with
	  port number rather than index position in the internal port list
	* restructured more code in comm.c for command handling.  broke out
	  duplicated code into new functions and generally cleaned some stuff
	  up.  This makes way for the next change:
	* command_giver is now reference counted and properly restored on
	  error, etc.  no more need for it to be reset to 0 in the backend.
	* all objects now get the class definitions from the simul_efun object
	  if there are any, just as if they had inherited the simul_efun
	  object.  This resolves problems with class related errors when the
	  simul_efun object is involved [reported by Pinkfish@Discworld]

Sat Jun 17 12:15:08 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a31
	* updated with respect to v22.1b27
	* added extensive packet/volume statistic gathering to comm.c and
	  socket_efuns.c when the network_stats() contrib efun is compiled into
	  the driver [based on patches from Skullslayer@RoD]
	* Patches from Turrican@Discworld:
	  . added an optional 3rd argument to socket_bind efun to specify the
	    address and port to bind to (in the same format as socket_connect)
	  . added an optional 2nd argument to socket_address efun to return the
	    socket's local address when specified as non-zero

Thu Jun 15 17:11:07 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a30
	* NUL terminate user input buffer before passing it to handle_snoop().
	  [reported by Passerby@IoT]
	* correct handling of cr/lf when processing commands [reported by
	  Loriel@Lima Bean]

Mon Jun 12 09:06:09 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a29
	* updated with respect to v22.1b26
	* handle backspace in user input because some clients send everything
	  and don't filter out local edits [reported by Requiem@SG]
	* handle both \r and \n for command delimiters in user input
	  [reported by Requiem@SG]
	* respect NO_IP_DEMON option and -N driver command line option in the
	  new address server reconnection code [reported by Skullslayer@RoD]
	* expanded the array returned from the localtime() efun to include
	  LT_ISDST.  This is supported on most platforms.  For those that it is
	  not, the value will be -1.
	* the third argument to tell_room() can now be an object (from Ideas)
	* when COMPAT_32 is defined, closurep becomes an alias for functionp
	  [reported by Passerby@IoT]
	* made PACKAGE_PARSER compile with NO_ENVIRONMENT again
	* added an error handler to (s)printf to clean up its state when an
	  error occurs (usually only caused by the object_name master apply)
	* edit_source will load options.h/local_options for -configure, but will
	  not yet check the validity of these files.  this is done so that proper
	  configuration can be done for PACKAGE_DB
	* when NO_ANSI and STRIP_BEFORE_PROCESS_INPUT are both defined, escape
	  characters are stripped as they're copied into the user buffer, saving
	  alot of unnecessary work stripping them out later.
	* removed dead telnet_neg() function from comm.c
	* check for tzset() and the need to prototype it in configure phase

Mon Jun  5 13:16:25 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a28
	* updated with respect to v22.1b25
	* rewrote user command handling in comm.c:
	  . several buffer over-run fixes
	  . flush existing buffer before flushing a new OOB buffer
	  . ignore other than IAC IAC and IAC SE while in an IAC SB
	  . remove the space/backspace empty command hack
	  . some optimizations, less string scanning/copying than before
	  . fixed a memory leak when there are more than two lines to be
	    processed in PORT_ASCII and the object is destructed
	  . user input that exceeds the input buffer is now completely
	    thrown away.
	* additional cleanups to parser package from brett@stummies.org
	* check the reference time of the object before calling reset to
	  determine if the object needs cleanup, the same way it's checked
	  for swapping.
	* line number information is now stored as an int rather than a
	  short if USE_32BIT_ADDRESSES is defined.
	* COMPAT_BUSTER: when COMPAT_32 is defined with PACKAGE_UIDS,
	  the uid assigned to a new object is the euid of the current
	  object rather than the uid of the current object.
	* fixed #warn to be properly recognized [fix from Skullslayer@RoD]
	* fix a parser crasher in interrogate_object() when the object has
	  both PI_SETUP and PI_REFRESH flags [reported by Dvarsk@Nightmare]

Wed May 24 12:01:34 CDT 2000 (mmessier@prilnari.com (Marius))
	* raised patchlevel to v22.2a27
	* updated with respect to v22.1b24
	* fixed (s)printf() to be re-entrant.  This allows for the removal
	  of the master()->object_name() restriction which would cause an
	  infinite loop and crash the driver anyway.
	* contrib efun replaceable() does the checks that replace_program()
	  actually does now, and also adds a check for APPLY___INIT in
	  addition to APPLY_CREATE.
	* added a query_replaced_program() contrib efun to return the name
	  of the program that was replaced by replace_program().  Returns 0
	  if replace_program() has not been called on the object.
	* save_object() will save the name of the program that was replaced
	  by replace_program() if it has been replaced rather than the program
	  it was replaced with.
	* fixed crasher when number of locals to pop in the compiler was 0.
	* added GET_CHAR_IS_BUFFERED to options.h.  Not defined by default,
	  but when it is defined, get_char() will be buffered.  See the comment
	  in options.h for more information.
	* an attempt will now be made once every 15 minutes to reconnect to the
	  address server if the connection has been lost (or not made at start-
	  up to begin with).
	* if THIS_PLAYER_IN_CALL_OUT is defined, reclaim_objects() will only
	  zero the saved command_giver if that object has been destructed.

Thu Nov 12 12:53:35 EST 1998 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a26
	* updated with respect to v22.1b22
	* added Skullslayer@RoD's patch for #warn and #error

Wed Mar  4 04:57:16 EST 1998 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a25
	* updated with respect to v22.1b21
	* paranoid debugging check added in compiler.c
	* fixed typo in string_copy() call in add_slash()
	* Fixes from Belgarat:
	  . update patch_in() to take into account the v22.2a17 switch
	    changes
	  . remove obsolete code in DEBUG_MALLOC_EXTENSIONS (privs_file_fname
	    no longer used)
	  . fixed typo that caused parse_refresh() to be ignored
	* SERVER_IP stuff moved to the runtime config file.  SERVER_IP defines
	  in local_options files will still work. [change from Gorta]
	* '&' is now a synonym for 'ref' when COMPAT_32 is defined
	* fixed crasher when ref was used in function calls inside function
	  arguments, e.g. func(foo, bar(ref x), ref x)

Thu Feb 26 00:34:42 EST 1998 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a24
	* more EOF fixes in lex.c [reported by Lathander]
	* fixes from Turrican@DW
	  . call set_non_blocking() on all new accepted sockets since there
	    evidentally exists OSs that don't do this
	  . NUM_EXTERNAL_CMDS is now in options.h
	  . removed name field from lpc_socket_t (was unused, and the lookup
	    didn't use addr_server, ack)
	  . external_start can now take an array of string arguments as the
	    second arg
	* call_stack(0) now correctly returns "<function>" and not
          "/<function>"; actual fix is in add_slash() so this may fix other
          instances of this behavior as well [reported by Donky]

Mon Nov 24 14:58:27 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a23
	* added leading / to filename in function return type warning
	  message [reported by Aragorn]
	* fixed crasher in explode() when result exceeds the max array size
	  [reported by Aragorn]
	* fixed EOF handling in lex.c
	* Errors no longer turn off the heartbeat (and send the heartbeat
	  message) if MUDLIB_ERROR_HANDLER is enabled.
	* program_info() now returns a mapping

Wed Nov 12 21:42:54 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a22
	* recompute runtime_index instead of storing it in the apply_low
	  cache
	* fixed all uses of is*() functions on signed chars with the high
	  bit set
	* fixed typo in apply_low() cache check
	* reference programs in the apply_low() cache to avoid being confused
	  by dangled pointers.  fixes crasher reported by Aragorn, Jihad.
	  See discussion in interpret.c for additional details.

Wed Nov 12 13:17:52 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a21
	* fixed BINARIES to work with the new switch() format
	* updated loop generation for LPC->C
	* fixed a typo in grammar.y.pre (patch was backwards last patchlevel)
	* made the "Multiple access modifiers" error message a bit less
	  ambiguous

Tue Nov 11 18:34:44 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a20
	* three typo fixes from Aragorn (edit_source.c, grammar.y.pre,
	  packages/contrib.c)
	* one from Symmetry (grammar.y.pre)

Fri Nov  7 12:35:42 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a19
	* updated with respect to v22.1b19
	* reduced call_other cache overhead by a factor of two.
	* fixed compilation with PRIVS on [reported by Jihad] and
	  PACKAGE_UIDS/PACKAGE_MUDLIB_STATS defines [reported by Leto]
	* fixed the disassembler to know F_SWITCH addresses are relative now
	* don't warn about m[-1] if m is type mapping
	* fixed crasher in map_mapping()
	* fixed non-existent master applies
	* call pop_value() on the first_for_expr before parsing the body
	  of the loop, so any warnings generated have the correct line number
	  [reported by Aragorn]
	* from Symmetry:
	  . fixed unused warnings for things like {int x = 1; } { int y; }
	  . fixed checks for multiple access modifiers
	  . fixed bug in switch ranges

Tue Nov  4 16:53:54 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a18
	* updated with respect to v22.1b17
	* cp() now also errors (like mv()) if the src and dest files are 
	  the same.  Previously, it just truncated the file.  [suggested
	  by Zod@Delirium]
	* -> syntax now uses a call_other() sefun, if one exists.  Type
	  checking for it was also improved somewhat.
	* master applies are now cached the same way simul_efuns are.
	  applies.h is now autogenerated from 'applies'.  Heartbeats also
	  use the same calling mechanism now.
	* global 's/){/) {/' on the source code (sorry Sym :-))
	* Removed strstr.c; OS's definition is undoubtably better in most
	  cases
	* Correct line number info is now generated for initializers (this
	  is actually almost a side effect of one of Symmetry's changes)
	* Changes from Symmetry:
	  . varargs int global = 2; is an error now
	  . More restrictive, but sensible type order:
            <basic_type> <array|> <ref|> <*|>
            Earlier one could also do basic_type ref array etc.
          . ref cannot be used in global vars, casting (also an earlier
	    crasher), function declaration, local declarations
	  . Can have at most 64 classes now, earlier it was 32 but one
	    would also be able to crash it at 32 I believe
	  . Make sure that variables/functions have appropriate types after 
	    inheriting classes
	  . Better error message if a previous func definition does not match
	    an about to be defined function
	  . Fixed some unused local var warnings which were erroneously
	    (not) generated e.g. in { int x; } { int y; write(y); }
	    Also fixed the order of such warnings in the case of { int x,y; }
	  . fixed a crasher/hanger in scratchpad for having a 
	    scratch_copy_string when the scratchpad is completely filled
	    (reported by Curuntar@Lima Bean)
	  . Actually free the scratchpad immediately after 
    	    new(class foo, x:1, y:2) instead of waiting until 
	    the end of compilation
	  . Give error message for new(class foo, x:1, x:2)
	  . Global modifiers now work a little differently. 
	    There is the notion of access modifiers (private, public, 
	    protected/static).
    
	    Other modifiers are (varargs, nomask, nosave/static).

	    The modifier now affects everything until the next such modifier:

	    private:
		varargs int foo(mixed a, mixed b){
		}

	    means that foo is private varargs. It is an error to have two
	    different access modifiers (such as public private) for any 
	    function, global var or inheritance. 

	    This is the case only if SENSIBLE_MODIFIERS is defined, since 
	    old libs often use private static etc. Also fixed the
	    check of 'public private:'. Earlier it wasn't causing the 
	    warning that  would have been given.
	  . Significantly reduced program size, especially function tables.
    	    A prototypical example of the savings for /std/race/human
    	    on Lima, which normally has 533 functions, 526 of which is 
	    inherited:  The function table size is about 3k normally in
	    prev versions, 2k if COMPRESS_FUNCTION_TABLES is used, and
	    about 1k currently (even though one actually saves 601
	    functions currently, which amounts to 140 bytes extra, which
	    could be removed but at a cost in speed in local calls).
	    This example is typical of most mud programs which inherit
	    many functions but only add a few themselves.

	    The 1st call_other and local_calls should be better than
	    previously having defined COMP_FUNC_TABLES, but worse than 
	    previously not defining it.

	    The program header has also been cut down 8 bytes.
	
	    If BINARIES is not defined, one saves an additional 4 bytes
   	    per non-inherited function.
	    program_info(object ob|void) is a good way to find out about 
	    program sizes.
	  . The order of name resolution for multiple inheritance is as 
	    follows:
	    inherited prototypes < non-inherited prototypes <
    	    inherited functions < non-inherited function (can only be one)
    	    Within each class sequential order is used for resolution (later
	    inh prototypes win over earlier for e.g.).
    
	    The use of prototypes is dual:
	    (1) As an abstract method (see java). You can call prototypes 
	    and only let inheriting programs define the actual functions.
	    (2) A typesetter. At this moment this is semi-strict. A warning
	    is produced for return type not being compatible. Argument types
	    are not checked however.
    	    
	    While it is not crucial in principle, programmers are encouraged
	    not to be too lax about types. In the future (possibly far), it
	    may be that meaningful compile-time types are the only way to 
	    progress. 
	  . If BINARIES is defined, only save string switch info if 
	    PRAGMA_SAVE_BINARY is true
	  . LPC->C RUNTIME_LOADING support for alpha

Tue Oct  7 01:39:30 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a17
	* updated with respect to v22.1b16
	* Don't generate unused argument warnings for variables in prototypes
	  [reported by Jihad]
	* Generate a warning for global variables with the same name as 
	  another global variable (unfortunately, historically this hasn't 
	  been illegal)
	* improved RUNTIME_LOADING support on Linux from Alaron@RetroMUD
	* fixed crasher/garbage error for replace_program(non_string)
	* -Wmissing-declarations added to the develop compile options;
	  lots of local procedures declared static.
	* compat/simuls/apply.c extended to have all the functionality of
	  3.2's apply().
	* added a warning for declaring a global variable with the same
	  name as another global variable
	* fixed the disassembler not to crash on out of range simul_efuns
	  and zero opcodes
	* added USE_32BIT_ADDRESSING which allows up to 4GB of bytecode
	  as long as all branches are less than 64k.  When LPC->C is
	  defined, this is always on.
	* switch() offsets are now all relative
	* deep_inventory() and living() default to this_object()
	* added F_SHORT_INT opcode for two byte integer constants
	* optimized map_mapping() to not copy ref 1 mappings

Sun Oct  5 12:26:39 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a16
	* fixed crashes in attempting to use ::func() to call a private
	  function [reported by Random et al, fix from Cloud]
	* if gcc is being used, try using __USE_FIXED_PROTOTYPES__ to have
	  the gcc header files define prototypes for functions that are
	  missing (hopefully this can get rid of more of lint.h especially
	  on SunOS.  Anyone care to test on SunOS?)
	* fixed typo in Makefiles ($(DRIVER) -> $(DRIVER_BIN))
	* added reclaim_call_outs() prototype
	* added debug() accounting code for COMPRESS_FUNCTION_TABLES;
	  uses "comp_func_tab" as a label
	* added "LPC" and "LPC_line" debug() labels; the former uses line
	  number information to print out the file and line of code as it
	  executes.  The latter pulls the line itself out of the source
	  file and prints it too.
	* fixed crasher in safe_apply() due to args left on stack when an
	  error is caught.  (This is the LIMA "crash when updating SECURE_D
	  or master object and getting a warning" bug)
	* The starting debug_level can now be set from the command line;
	  use -d followed by the name of the flag that set_debug_level() uses.
	  e.g. "-dLPC -dLPC_line -dsockets"

Sat Oct  4 23:29:51 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a15
	* updated with respect to v22.1b15
	* added implementation for filter(string, ...)

Sat Oct  4 23:29:51 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* (v22.2a14 release bungled; number skipped)

Thu Sep 25 00:22:45 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a13
	* updated with respect to v22.1b14
	* improved warnings for code with no side effects
	* changed optimizations for casted string constants to obey their
	  new type (just for consistency)
	* resolve() can now take a function pointer as the second arg

Wed Sep 10 01:14:10 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a12
	* added a Perl script compat/fixstatic that does a pretty good job
	  of converting static to nomask/protected

Fri Sep  5 01:01:54 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a11
	* fixed ASCII external ports
	* implemented MUD mode external ports (use "MUD" in the config file;
	  the mixed value gets passed to process_input)
	* Parsing package changes:
	  . parse_sentence has an optional 3rd and 4th arg.
	  . The 3rd arg an array of objects to use in the parse instead of 
	    the inventory of the environment of the user.  Nested arrays
	    indicate containment, i.e. ({ ob1, ({ object inside ob1 }),
	    ob2, ob3, ({ first ob in ob3, second ob in ob3 }), ... })
	  . The 4th argument is a mapping of string -> object which can
	    be used to supply nicknames and similar things.  For this parse,
	    the 'object' acts as if 'string' were returned by pc_id_list().
	    Entries that do not correspond to objects involved in the current
	    parse are ignored.
	  . fixed crashes in calling parse_refresh() from within a parser
	    callback.  This is now the correct way to say "I'm returning this
	    answer, but ask again next time too"

Wed Sep  3 13:30:07 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a10
	* updated with respect to v22.1b12
	* added missing 'return ret' in dump_socket_status() compat simul
	* added parser packages fixes from Belgarat:
	  . new error: ERR_MANY_PATHS
	    returned when the number of possibilities needed to figure out
	    the meaning of a sentence exceeds a certain number (i.e. figuring
	    out certain highly ambiguous sentences isn't worth the CPU)
	  . PARSE_DEBUG can be used to get parser debugging without compiling
	    with DEBUG on
	  . evil new :c modifier that means just choose the first one you
	    find, for MUDs that want to make a mistake they will regret for
	    the rest of their lives, and be hated by their players
	    [nah, the maintainer would _never_ insert personal opinions into
	     the ChangeLog]
	  . "finally, two-object rules are examined more thoroughly and some
	     strange parse errors are eliminated.

	     Changed semantic for applies:
	     direct_ and indirect_ applies can be called with 0s as the
	     object-type arguments. However it's now guaranteed that they
	     will be called with filled object arguments at least once during
	     the processing of a rule.
	     This allows objects to do explicit checks.
	     The direct_ and indirect_ applies should work as usual when they
	     receive 0 as object argument - they simply should return if the
	     object can or can not participate in the rule.
	     When the arguments are filled, the direct_/indirect_ applies can
	     perform thorough checks and return errors."

Sat Aug 30 19:23:35 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a9
	* updated with respect to v22.1b11
	* fixed typo in '\\' handling in #defines; also added overflow check
	* removed unused local in interpret.c
	* added a #breakpoint preprocessor directive which calls 
	  lex_breakpoint(), which does nothing.  Useful for setting debugger
	  breakpoints that stop at a particular point in LPC compilation

Wed Jul 23 18:30:27 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a8
	* added lex.c fixes from Burty:
	  . Handle '\\' correctly in defines
	  . preserve whitespace when expanding defines
	  . added quote checks in expand_all_defines()

Thu May 15 14:14:42 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a7
	* reformatted the trace information with MUDLIB_ERROR_HANDLER off;
	  should be a bit easier to read now.

Wed Apr 16 07:54:45 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a6
	* updated with respect to v22.1b8
	* object_present() now depends on #ifdef F_PRESENT instead of
	  NO_ENVIRONMENT so it disappears in the !NO_ENVIRONMENT && !F_PRESENT
	  case too. [idea from Jihad]
	* name change: the file "Install" is now "INSTALL" to make it slightly
	  more visible
	* fixed file.h to check file_incl.h for S_IS* first [fix from Leto]
	* fixed the multiple class inherit code to work [fix from 
	  Wodan@Discworld]

Sun Apr 13 23:59:02 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a5
	* updated with respect to v22.1b7
	* fixed compilation with DEBUGMALLOC off
	* (: efun::foo :) is now a valid efun pointer (assuming
	  master()::valid_override() doesn't complain)

Sat Apr 12 15:06:30 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a4
	* updated with respect to v22.1b6
	* reclaim_objects() now cleans destructed this_player's and objects
	  out of the call_out() list
	* commenting out input_to() or get_char() in func_spec.c now removes
	  all related code and variables

Sun Apr  6 18:00:43 EDT 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a3
	* updated with respect to v22.1b5
	* classes can now be inherited multiple times, as long as the
	  definitions are consistent.
	* fixed macro expansion to expand all arguments to macros immediately.
	  in particular, the ANSI stringize hack:
	#define S(x) #x
	#define STRINGIZE(x) S(x)
	  now works.  E.g. after #define FOO bar, STRINGIZE(FOO) gives "bar"
	  and not "FOO"

Wed Apr  2 15:11:10 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a2
	* updated with respect to v22.1b4
	* specifying both left and center justification in sprintf() now
	  pushes odd-length strings to the left instead of the right, e.g.
	  sprintf("%|8s",  "foo") == "   foo  "
	  sprintf("%|-8s", "foo") == "  foo   "
	* fixed crasher in calling socket_status() for a socket owned by
	  a destructed object [reported by Jihad]

Tue Apr  1 13:59:43 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.2a1
	* added a slightly improved version of Tim's socket_status() efun.
	  Usage:
	    socket_status(int fd) returns an array with:
	    . ret[0] = (int) fd
     	    . ret[1] = (string) state
     	    . ret[2] = (string) mode
            . ret[3] = (string) local address
            . ret[4] = (string) remote address
            . ret[5] = (object) owner
	    socket_status() returns an array of arrays; one for each socket.
	* COMPAT_BUSTER: dump_socket_status() is gone; see compat/simuls
	  for a replacement [written using socket_status]
	* socket status information is now cleared when the socket is closed
	* fixed a bug that caused the close callback not to be called for
	  sockets that went through the CLOSING state

----------------------------------------------------------------------------
(v22.1a17 promoted to v22.1b1)

Wed Jan 29 19:15:44 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a17
	* updated with respect to v22b27
	* fixed origin() to not return "call_out" for ORIGIN_INTERNAL
	  [reported by Jihad]
	* added Marius' patch to make the parsing package work with
	  NO_ENVIRONMENT.  Requires the following new master applies:
	  . parse_get_first_inventory(object ob)
	    { must behave like first_inventory(ob) }
	  . parse_get_next_inventory(object parent, object current)
	    { must behave like next_inventory(current); 
	      parent == environment(current) in case you need it }
	  . parse_get_environment(object ob)
	    { must behave like environment(ob) }
	  [I'm not in love with this interface, but it will do for now]
	* fixed a number of warnings

Sat Jan 25 18:14:00 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a16
	* wrapped debug.c in #ifdef DEBUG_MACRO
	* fixed crasher in file operations very early in the boot process
	  (before the master object loads); evidentally some libs actually
	  do this [both reported by Aragorn]

Thu Jan  9 20:20:40 EST 1997 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a15
	* updated with respect to v22b26
	* added Raistlin@IE's patches to make the Win32 build procedure much
	  cleaner and not depend on so many GNU utilities; also did a wonderful
	  job of cleaning up the OS specific Win32 code.  Fixes a number of
	  bugs, as well.
	  [ also, I can't test these, since I still don't have a Win32
	    compiler, so I'd appreciate it if someone would let me know
	    if I messed something up ]
	* fixed crasher in explode("foofoo", "foo") with SANE_EXPLODE_STRING
	  on and REVERSIBLE_EXPLODE_STRING off
	* enhanced DEBUG_MACRO a bit; things are now in terms of identifiers
	  instead of impossible to remember numbers.  To add a new one,
	  add the define to debug.h and the entry near the top of debug.c
	  Then do:
	     debug(mylevel, (...))
	  new efuns:
	  . set_debug_level("mylevel")
	  . clear_debug_level("mylevel")
	  . debug_levels() [returns a mapping showing which messages are
	                    enabled]
	* A few changes to call_out:
	  . 0 delay call_outs are legal
	  . call_outs to the same time are in the order they are set up, not
	    in reverse order
	  . call_outs() from w/in call_outs() are relative to the time the
	    call_out was scheduled to go off, not the actual time; this is
	    because:
	  . the current time is slowly advanced as call_outs are executed
	    until the current time reaches the real time, instead of taking
	    a huge leap forward (in the event that the MUD is busy enough
	    that it is getting behind)

Mon Dec 30 04:08:08 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a14
	* fixed compilation with UIDS enabled [reported by Leto]
	* added support for:
	  . allocate(int n, mixed v):
	    allocates an array of n elements.  The i-th element is set to
	    evaluate(v, i) [i is in the range 0..n-1]
	  . allocate_mapping(array keys, mixed v):
	    - if v is an array, the returned array has keys 'keys' and values
	      'v' (like 3.2.x's mkmapping)
	    - if it is a function, the the mapping has keys 'keys' and values
	      evaluate(v, key)
	    - otherwise, each key has the value 'v'

Mon Dec  9 13:27:42 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a13
	* updated with respect to v22b25
	* fixed a bug introduced recently which caused random() to always
	  return zero when drand48() was being used [reported by Leto]
	* changed restore_object() to ignore ^M's at the end of lines in
	  save files
	* added leading / to get_save_file_name() argument [reported by
	  Leto]
	* fixed ARCH define for Linux/alpha
	* fixed some implicitly defined functions which cause warnings on
	  the alpha
	* fixed crasher/wild pointer write in code like:
	  foreach (string s, ref r in m) { map_delete(m, s); r = 0; }

Sun Dec  8 23:50:32 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a12
	* fixed a bug that would cause implicitly defined functions (ones
	  with no prototype in scope allowed by strict types being off)
	  to become invisible when inherited [reported and tracked by
	  Aragorn; also reported to affect NM muds on alpha drivers]

Fri Nov  8 12:03:53 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a11
	* updated with respect to v22b24
	* changed function pointers whose owners are destructed to be
	  ignored by call_out_list() and to not error when they fire.
	  Changed so that "foo" and (: foo :) have the same/similar
	  behavior.  This isn't strictly an equivalent case, since
	  (theoretically) the function could be owned by a different
	  object than the one that did the call_out(), but that is
	  probably restricted to code doing call_out()s on behalf of
	  other objects anyway, and the runtime error is more annoying
	  than useful.  [Suggested by Mordred@RoD]
	* to_int() now returns undefined if no valid characters were converted.
	* leading slash added to in_edit() [reported by Mystic]
	* call srand48() if using drand48() to make random numbers [fix
	  from Turrican@DW]
	* fixed compilation with NO_ADD_ACTION off or OLD_ED on, or
	  NO_BUFFER_TYPE on
	* fixed the order of .o files for RUNTIME_LOADING
	* fixed switch() when two cases differ by more than 2^31
	* better local_options error message

Sat Nov  2 18:00:04 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a10
	* use -m486 for pentium too
	* added /'s in non mudlib error_handler traces
	* fixed compilation with SUPPRESS_ARGUMENT_WARNINGS off
	* receive() can now take a buffer as its argument (useful for
	  PORT_BINARY connections)
	* fixed PROFILE_FUNCTIONS not to miss calls which miss the apply_low
	  cache
	* fixed the driver not to loop if more than one -D option is passed
	  on the command line
	* the debug.log file is no longer opened and closed every time it
	  needs to be written to; it is held open instead
	* made the DEBUGMALLOC hash a bit more efficient
	* fixed a bug that caused terminal_colour() not to strip spaces of
	  the starts of all lines, instead of just continuations of wrapped
	  lines
	* parser callbacks went back to being ORIGIN_DRIVER, since they
	  are restricted to the 'can_', 'do_' and 'indirect_' namespaces
	* various fixes to compilation with uids enabled
	* add to the errors field of mudlib stats, even if a mudlib error
	  handler exists
	* added parser support for 'a', 'any', 'my'

Tue Oct 29 20:41:26 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a9
	* updated with respect to v22b21
	* fixed possible crashers in code like 'call_out(something, 1, ref x)'
	* fixed wild pointer into stack in code like:
	  mixed global;
	  void foo(mixed args...) { global = args; }
	  void create() { int x; foo(ref x); }
	  void inc(int ref x) { x++; }
	  void increment_random_location_on_stack() { inc(global...); }
	* fixed the 'multiple access modifiers' warning not to consider
	  nomask and nosave to be access modifiers
	* disabled the multiple access modifier error message with
	  SENSIBLE_MODIFIERS off
	* fix for compiling with COMPRESS_FUNCTION_TABLES off from Mystic
	* fixed compilation with FD6 code disabled
	* fixed various crashers in the unused locals warnings
	* various changes to func_spec.c so that built in efuns can be
	  disabled or renamed (e.g. remove or rename clone_object(), etc)
	  [idea from Mystic]
	* added support for foreach (ref x in array), 
	  foreach (x, ref y in mapping)
	* better error message for indexing an illegal type using a range
	* enabled the 'public' keyword with SENSIBLE_MODIFIERS on; it was
	  accidentally disabled.  Also fixed the options.h entry to be
	  clearer
	* added a SUPPRESS_ARGUMENT_WARNINGS option, to cut down on the
	  number of warnings generated by code which existed before
	  omitting the argument name was legal
	* fixed terminal_colour() to treat multiple spaces as one space
	  when wrapping [reported by Jihad]
	* fix for errors writing to flushing sockets

Mon Oct 28 17:14:29 EST 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a8
	* COMPAT_BUSTER: ORIGIN_CALL_OUT is now ORIGIN_INTERNAL; in addition
	  most driver callbacks which do not use hard coded function names
	  also use ORIGIN_INTERNAL (add_action, socket callbacks, etc).
	  The practical fallout of this is that such routines may be static,
	  but *not* private.
	* Use fd #6 instead of fd #3, since Solaris uses fd #3 while
	  starting the program [reported by Aragorn]
	* fixed crasher in the parsing package generating the object list
	  [fix from Aragorn]
	* It is now legal to use a class member of something of type mixed,
	  as long as it is unambigous (e.g. foo->x is ok as long as only
	  one class in scope has a member named 'x', or if 'x' is in the
	  same position in all classes in scope)
	* Unused local variables now generate warnings
	* function arguments no longer need to have names (and not naming
	  them inhibits 'unused' warnings)
	* more than one access specifier (e.g. 'public private protected')
	  generates a warning
	* If SENSIBLE_MODIFIERS is defined, then:
	  (1) 'static' no longer exists, and is replaced by 'nosave' and
	      'protected'
	  (2) 'public' no longer means what it used to; it now means the
	      default visibility
	* COMPAT_BUSTER: modifiers from a '<modifier>:' declaration only
	  affect declarations which have no modifiers of their own.  I.e.
	  'private: nomask x;' no longer declares x to be private
	* if VIRTUAL_RESERVED_WORD is defined, then 'virtual' is a
	  reserved word.  Doesn't do anything, though.
	* if REF_RESERVED_WORD is defined, the 'ref' can be used to declare
	  arguments to functions to be by reference instead of by value.
	  example:
	  int foo(int ref i) {
	    i++;
    	  }
	  void create() {
	    int y = 1; foo(ref y); write(y);
	  }
	  prints '2'.  Note that ref is required both in the declaration
	  and the call.
	* fixed a bug that would cause compile errors when indexing something
	  of type 'mixed'
	* added an 'efun_defined' pseudo function to the preprocessor.  It
	  works just like 'defined', except that it looks up efuns.  Example:
	  #if !efun_defined(snoop)
	     write("snoop efun not available.\n");
	  #endif

Mon Oct 21 17:48:12 EDT 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a7
	* updated with respect to v22b20
	* added Burty@Nanvaent's fixes for stringizing and macro
	  expansion
	* added support for array &= and |= [idea from Avenger@CoreDump]
	* added the object name to the "Saving successful match" parser
	  debugging message [idea from Aragorn]
	* added Leto's SERVER_IP patch
	* abort compilation after getting 5 errors, since we don't print
	  any more anyway, and the leaks this was supposed to prevent
	  were fixed years ago
	* MudOS now checks if file descriptor #3 is a valid socket when
	  it starts up; if it is, it is used as a login port.
	* added a 'portbind' program:
	  syntax: portbind [-p port#] [-d drivername] [-u uid] [-g gid] [args ...]

	  All it does it bind the specified port, then execv() the driver,
	  passing the bound port as file descriptor #3 (see above).
	  drivername defaults to ./driver, and port# defaults to 23.
	  if uid or gid is specified, setuid() and setgid() are called
	  before exec'ing the driver.

	  This means one can bind the telnet port by making portbind setuid,
	  and using:

	  portbind -u <mud uid> -g <mud gid> config.mud

	  to run the driver

Wed Oct  9 15:26:37 EDT 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a6
	* updated with respect to v22b19
	* fixed compilation with NO_ADD_ACTION off, PRIVS on, or
	  PROFILE_FUNCTIONS on [re: the 'ob' global recently removed;
	  reported by Aragorn, Jihad, Avenger, etc]
	* only do promotions (int)<->(float) on assignment, not op=; in
	  the second case the conversion will be done by the efun (if
	  legal) so there is no need.

Mon Oct  7 16:43:45 EDT 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a5
	* hidden checks are now compiled out if set_hide() is disabled in
	  func_spec.c [idea from Avenger@CD]
	* buffer code is compiled out if NO_BUFFER_TYPE is defined; also
	  fixed a few old references to DISABLE_BUFFER_TYPE.  [idea from
	  Avenger@CD] Also, a binary port in the config file will cause
	  a sensible error message, and attempting to create a binary
	  socket will return EEMODENOTSUPP.
	* removed the 'ob' global in efuns_main.c and related hacks with
	  respect to object_visible(); also fixes a bug in the return
	  value of environment() when it is hidden (and probably other
	  bugs elsewhere too) [reported by Jihad]
	* fixed crasher in using the name of a file that doesn't exist
	  as the object in an efun callback (e.g. filter(({}), "foo", "bar"))
	* fixed a couple compile problems and a crasher in
	  PACKAGE_MUDLIB_STATS [reported by Avenger@CD]

Thu Oct  3 18:16:53 EDT 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a4
	* updated with respect to v22b17
	* need to include "master.h" in the uid package now [fix from Leto],
	  mas well as md.c, and master.c needs comm.h when tracing is
	  enabled
	* fixed Makefiles on non-GNUmake systems to include the two new
	  files introduced last pl
	* fixed crasher in the handling of refreshing the master object;
	  also the literals are cached but are *not* affected by
	  parse_refresh().  The reasoning is that if they change, it
	  would cause all hell to break loose with existing rules.
	  So parse_refresh() only needs to be called when the return
	  value of parse_command_users() changes.

Tue Oct  1 19:14:42 EDT 1996 (tim@wfn-shop.princeton.edu (Beek))
	* raised patchlevel to v22.1a3
	* updated with respect to v22b16
	* fixed various crashers in the new snoop code [reported by Jihad]
	* Many thanks to DrFeelgood for helping clean up header file
	  dependencies, and pointing out typos in options.h
	* Warning for using both a 'port number : ' line and an 
	  'external_port_1 : ' line
	* moved master object and function pointer handling to their own
	  files
	
Mon Sep 30 18:56:54 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22.1a2
	* updated with respect to v22b15
	* #'foo is now the same as (: foo :) when COMPAT_32 is defined
	  [suggested by Bubbs]
	* added NO_SNOOP option
	* The requirement that a snooper must be interactive has been lifted
	  (though this isn't particularly useful unless RECIEVE_SNOOP is
	   also defined) [suggested by Larnen]

Tue Jun  4 00:57:30 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22.1a1
	* COMPAT_BUSTER: #include <...> now no longer searches based on
	  relative paths; #include "..." still does.
	* added Blackheart's diffs for using gdbm.  See PACKAGE_GDBM for
	  details; probably this should be merged with Descartes'
	  PACKAGE_DB stuff ...
	* added Avenger@CD's diffs for a union array operator (|)
	  (with trivial changes and a array stat fix)
	  Works analogously to &:
	  ({ 1, 2, 3 }) & ({ 2, 4 }) = ({ 2 })
	  ({ 1, 2, 3 }) | ({ 2, 4 }) = ({ 1, 2, 3, 4 })
	* if ARRAY_RESERVED_WORD is defined, use "array" instead of "*"
	  in error messages [e.g. "Bad assignment ( mapping vs array )"]
	* added Marius@Prilnari's fixes to lex.c: token pasting in
	  preprocessor macro expansion and adds token quoting
	* added the -c option to the RUNTIME_LOADING compile flags since
	  it disappeared somehow
	* Hidden object fixes for present() and environment()
	* COMPAT_BUSTER: removed the tail() efun; a simul_efun is in the
	  compat dir
	* added leading / to log_error() filenames
	* cleaned up a bunch of duplicated code in array.c, and corrected
	  a few statistic bugs
	* Parser package changes:
	  . added the object name to some parser debugging messages
	  . moved names of the applies to top of parser.c as #defines
	  . information from the master object is now cached
	    (parse_command_users, parse_command_prepos_list)
	    COMPAT_BUSTER: this means parse_refresh() must be called
	    if the information changes
	  . livings_are_remote() is now rechecked when a parse_refresh()
	    is done

----------------------------------------------------------------------------
(v22a41 promoted to v22b1)

Mon May 27 16:20:09 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a41
	* variable information is now stored only in the program in which
	  the variable is defined; estimated compression ratio is about
	  10:1. YMMV
	* COMPAT_BUSTER: all inherits must now precede all global variable
	  definitions
	* Added Ceda@IdeaExchange's fixes to the Windows '95 port
	* fixed compilation error in c_prepare_catch()
	* added a COMPRESS_FUNCTION_TABLES option, which compresses function
	  tables even further (estimated compression: 2-3x) at the cost of
	  slowing down function calls slightly (<5-10%)
	* Fixed error() to correctly added a trailing \n to error messages
	  that are missing them
	* Crasher fix in mapping composition (from Avenger@CoreDump)
	
Sun May 26 00:37:08 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a40
	* internal function aliases are handled a little smarter, anticipating
	  more function table memory optimizations later
	* fixed some crashers/problems involving #pragma optimize and some
	  compiler errors
	* fixed a crasher in passing a filename that wasn't a string constant
	  to dump_prog()
	* program_info() can now take an object as a first arg
	* fixed a problem that would cause functions that were prototyped 
	  before inherited to call the first function defined in the
 	  object instead.

Fri May 24 00:30:10 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a39
	* terminal_colour() now has two more optional args; the 3rd is the
	  width to wrap at, and the 4th is the indent for lines after the
	  first
	* Fixed a crasher in some Too deep recursion errors
	* Fixed crashers in constructs like while (...){ e = catch { break; } }
	  Jumping out of a catch block is now illegal.
	* Fixed a crasher in program_info() when there are objects without
	  type information loaded

Thu May 23 15:46:10 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a38
	* YYTYPE's size changed from 10 to 8, which should make the compiler
	  slightly more efficient.
	* Fixed a bug in the generation of information to pass to mudlib
	  error handlers, which would cause an "Illegal array size" error
	  to be flagged before the error handler was even called.
	* A few changes to $() notation:
	  . $() now moves out one level, not all the way out.  So, to use a
	    local variable in a function from inside a doubly nested function
	    pointer, one needs to use $($()), e.g.:
	    string x; function f = (: (: $($(x)) :) :);
	  . Due to the above change, constructs like $($1) are now legal, and
	    work as one might expect, e.g.:
	    function f = (: (: write($($1)) :) :); // The inner function
				// function pointer writes whatever is passed
				// as the first arg of the outer one
	    function g = evaluate(f, "hi"); // creates a function pointer that
	                                    // writes "hi"
	  . this isn't really that complex; just remeber the rule "Each $()
	    temporarily removes one level of (: :) nesting."  Familiarity
	    with functional programming is also recomended; (: (: :) :)
	    constructs are function pointers that create and return function
	    pointers when evaluated, _not_ simply composite functions.
	  . there is now a limit to function pointer nesting; the default is
	    10.  (Anyone who needs more is sick, but I thought I'd mention it)
	  . this also fixes a few crashers in using $() inside doubly nested
	    function pointers

Mon May 13 23:16:05 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a37
	* Fixed a crasher in redefined functions
	* added a STRIP_BEFORE_PROCESS_INPUT option for NO_ANSI
	* fixed call_out() to pass zero args if zero args were specified,
	  instead of always passing a first arg of 0.  (Usually, you'd never
	  notice, but it makes a difference when scheduling call_outs to
	  efun pointers to efuns which take no arguments)
	* COMPAT_BUSTER: call_out_info() elements now have only 3 elements,
	  not 4; this is due to argument handling restructuring, as well
	  as mild security concerns for reference types.  Maybe an option
	  will be added to get the arguments at a latter date if it is
	  desired.
	* minor tweaks to the cleanup rules in the makefiles to get rid
	  of a few irrelevant files in the diffs
	* added Maarten de Jong's documentation on compiling MudOS on
	  an Amiga using gcc as amiga/README-gcc.
	* Changed ED_MAXLINE from 512 to 2048
	* Warning for using | or & when both arguments are "boolean" values
	  (e.g. the result of !, ==, !=, <, etc)

Mon May 13 00:29:11 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a36
	* Fixed a crasher in memory_summary() when some objects are swapped.
	* Fixed a crasher in check_memory() when BINARIES was #undef'd
	* '\"' -> '"' in rc.c, since the former confuses emacs's hilit19 mode
	* Better fix for the undefined function problem; the old solution
	  occasionally didn't work on some systems
	* Fixed a problem with aliases in the function table that would
	  sometimes cause ... args not to be handled right
	* Fixed a crasher involving prototypes preceding inherit statements
	* program_info() now calculates the overhead of save_types as well

Sat May 11 20:28:19 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a35
	* Reversed the function table search order in the new call_other 
	  search code to be consistent with overload search order
	* fixed a crasher in generated error messages for OBS rules which
	  have an indirect object
	* added some entries to the files Bugs and Ideas
	* load_binary() now sorts the function table so it is in the correct
	  order again since the order of shared strings is different from
	  when it was saved
	* fixed a bug in the apply_low cache code which was accidentally using
	  'prog', a global, with disastrous consequences when valid_save_binary
	  was called during the tail end of compilation.  'prog' is no longer
	  a global, and is returned where needed.
	* fixed a bug which caused the identifier hash table to become trashed
	  when a function was used before it was defined
	* 'make clean' now removes the testsuite's compile error log too

Fri May 10 22:21:39 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a34
	* moved strput() from the parsing package to the main distribution
	  so it can be used internally
	* Changed the building of compiler error messages to use strput(),
	  avoiding possible buffer overruns.  Normalized the max length of
	  most compiler error messages to 256 bytes.
	* Fixed compilation of PROFILE_FUNCTIONS
	* Fixed a bug introduced last pl that caused the call_other cache
	  to malfunction
	* Fixed octal escapes in strings; they were getting omitted
	* Fixed a crasher in unterminated @ blocks (which, by the way,
	  had absolutely nothing to do with /V\\age)

Tue May  7 14:23:45 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a33
	* moved the call to save the ed buffer of a user to before the
	  call to net_dead()
	* Rewrote most of the function table handling code.  Memory overhead
	  is now 15 bytes per function defined and 5 bytes per function
	  inherited, instead of 14 bytes per function inherited or defined
	  This cuts function table memory usage about in half on a stock
	  Lima lib.  YMMV.  Large open MUDs may see larger decreases;
	  the program_info() efun is a good way to check.
	* Removed the last traces of OLD_PREVIOUS_OBJECT_BEHAVIOR
	* The inheritance warning is now a bit clearer, e.g.:
	  foo() inherited from both /std/foo.c (via /std/bar.c) and 
	  /std/bazz.c; using the definition in /std/foo.c
	* Fixed the parsing package to not crash on reference to 'me' when
	  'me' isn't within sight (admittedly, an odd situation :-) )
	* Fixed the testsuite to realize call_stack(3) now returns strings
	* Tables of defined functions are now sorted, so they can be binary
	  searched; call_other time is now approximately O(m log n) instead
	  of O(m n) when the cache is missed (m = # of inherits, n = # of 
	  functions in each)
	* Removed OPTIMIZE_FUNCTION_TABLE_SEARCH: the new search method
	  is just as fast with no overhead
	* added Raistlin's patch for a parser bug that would cause the
	  verb name to get inserted at the start of the 'real names' section
	  of parser callbacks

Mon May  6 21:47:59 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a32
	* Small optimization to arrange_call_inherited()
	* Small cleanup to C function pointer handling in dumpstat.c
	* fixed a bug that caused dumpstat.c to ignore the size of array
	  headers
	* Fixed the check_memory(1) table to be formatted nicer
	* removed outdated code from program_info(); also fixed a bug that
	  caused the header size to be an absurd value
	* fixed a crasher in function_owner() [ref count bug]
	* added a memory_summary() contrib efun, which returns a mapping
	  of with entries: map["program name"]["variable name"]
	  Each entry contains the number of bytes used by that variable in
	  all active instances of that program.  The size of shared structures
	  is divided up evenly between all values that reference it.
	* Made the parser end of buffer checks a bit easier to maintain
	* added parse_remove(string verb) which removes all rules for the
	  verb 'verb' which were added by this_object()

Mon May  6 14:23:47 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a31
	* Added a FLUSH_OUTPUT_IMMEDIATELY option, which disables buffering
	  of output.  Useful for debugging.
	* Parsing package fixes:
	  . Fixed a bug that caused OBS rules to silently do nothing if
	    all the possible matches return errors beginning with '#'
	  . COMPAT_BUSTER: Now, zeros are passed for args that aren't
	    available yet (i.e. the indirect object in 
	    direct_foo_obj_bar_obj()).  Also, the arg which is currently
	    being worked on is now passed again (i.e. the direct object in 
	    direct_foo_obj_bar_obj())
	    Summary: "foo sword bar wiggle" would call:
	    . can_foo_obj_bar_obj(0, 0, "sword", "wiggle")
	    . direct_foo_obj_bar_obj(OBJ(sword), 0, "sword", "wiggle")
	    . indirect_foo_obj_bar_obj(OBJ(sword), OBJ(wiggle), "sword", 
				       "wiggle")
	    among other things
	  . Fixed a number of bugs and buglets in disambiguating parses
	    and generating error messages, especially in cases where all of
	    the attempts produce nonsense

Sun May  5 14:52:20 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a30
	* added NAME_TRUE_VARARGS flag to disassembly listings
	* propagate NAME_TRUE_VARARGS up the inheritance tree to avoid
	  incorrect argument type errors when #pragma save_types is in use
	* Parsing package fixes:
	  . made the maximum tokens per parser rule configurable at the top of
	    the parsing package [MAX_MATCHES]
	  . Optimizations to bitvec routines: bitvec_count(), get_single() in
	    the parser
	  . Fixed several spots where > MAX_NUM_OBJECTS involved in a parse
	    would cause crashes
	  . Fixed strput/strput_words to not write past the end of their buffer
	    when constructing long strings 
	  . Fixed a crasher in parse_add_synonym() (though it wouldn't crash
	    until the synonym or parse_dump() was used)

Thu Apr 25 01:32:46 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a29
	* fixed a bug that would cause call_outs which were exact
	  multiples of CALL_OUT_CYCLE to be delayed by one CALL_OUT_CYCLE
	  (sometimes could happen with call_outs that differed by a small
	  multiple of 2 from this)
	* removed an unused local in repeat_string
	* Fixed the parsing package to not crash when given a line containing
	  more than 256 words (now it just returns; the limit can be set at
	  the top of parser.c)

Tue Apr 23 16:58:34 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a28
	* added a contrib efun: repeat_string(string s, int n) which
	  essentially does: sprintf("%-*'"+s+"'s", n, ""), but is readable.
	  e.g. repeat_string("-=", 10) == "-=-=-=-=-=-=-=-"
	* redesigned call_outs slightly to allow constant time insertion
	* added a CALLOUT_HANDLES option, which has the following effects:
	  . call_out returns an int, which can be passed to the following
	    two efuns:
	    remove_call_out(int handle)
	    find_call_out(int handle)
	  . Note that using the handle is more efficient than using the
	    ob, function name version
	
Tue Apr 16 11:29:13 EDT 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a27
	* updated with respect to v21.7b21
	* Fixed sort_array to work correctly when called from a sort callback

Sun Mar 10 05:32:19 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a26
	* updated with respect to v21.7b20
	* Added Raistlin@IE's fix for a bug in replaceable()'s one argument
	  case introduced in v22a23 which caused the one argument form to
	  quit working
	* Fixed the ARCH define for 386bsd to not override the FreeBSD define
	* changed "stuf!" -> "unknown architecture", when ARCH cannot
          be determined
	* added a classp() efun
	* added support for \012 octal escapes and \x1e hex escapes in
	  strings and character constants
	* added a comment about what the legal values of CFG_LIVING_HASH_SIZE
	  are
	* crasher fix in the database package
	* put a remove_interactive() call back in that accidentally got removed
	  at one point, which caused the driver to busy loop until a message
	  was sent to the object whose link had died
	* COMPAT_BUSTER: two changes to call_stack(3): first, use strings
	  instead of numbers to be consistent with origin(); second, a bug
	  was fixed which was reporting the origin of the frame below the
	  indicated frame, not the frame itself.
	* fixed compilation on systems that use _SC_PAGE_SIZE, not _SC_PAGESIZE

Mon Mar  4 20:36:27 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a25
	* updated with respect to v21.7b19
	* added code to flush message queues when closing connections and
	  shutting down
	* added a flush_messages(void | object) efun for manually flushing
	  message queues (during a long thread of execution, for example)
	* fixed a bug that would cause some anonymous functions to not
	  be bindable
	* fixed a crasher in recursive structures in error traces
	* fixed a bug in sprintf() column mode that would wrap early if
	  a fit exactly in the width given

Fri Mar  1 13:33:14 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a24
	* added Pace@Callandor's patch for REVERSIBLE_EXPLODE_STRING
	* made PARSE_NUMERIC() into a routine instead of a macro, and
	  added support for scientific notation so that very large/small
	  floating point values restore correctly in restore_svalue() and
	  friends

Mon Feb  5 09:43:36 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a23
	* updated with respect to v21.7b18
	* added a 'parallel' target for parallel makes when using gmake
	* protected process_command against this_player() changing or
	  being destructed during process_input() and other nasty places
	* removed the DEBUG_COMM_FREEZE code
	* made the message queue flushing a bit lazier which should result
	  in smoother output and larger packet sizes
	* added Descartes' database package
	* added heart_beat_info() as a synonym for heart_beats() when
	  COMPAT_32 is on
	* replaceable now can be optionally passed a second array argument
	  which is a list of function names to ignore; if the second arg
	  is left out, ({ "create" }) is assumed, which gives the old
	  behavior.
	* added a function_owner(function) contrib efun.
	* made #undef PACKAGE_SOCKETS/#define PACKAGE_EXTERNAL compilation
	  fail more gracefully
	* fixed a parser callback bug that caused the 'real names' of
	  omitted args to be omitted too
	* added an error message for using the debug mode of parse_sentence
	  when the driver wasn't compiled with DEBUG on
	* fixed a bug that would cause parse_sentence() to return large
	  numbers instead of error strings
	* fixed a typo in the Incorrect argument to type %s error message.
	* fixed compilation when first_inventory() is disabled.

Sat Feb  3 13:06:23 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a22
	* fixed seteuid() to pass the correct second arg to valid_seteuid()
	* fixed the parsing package to not crash if parser_error_message()
	  doesn't exist

Sun Jan 21 21:29:34 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a21
	* updated with respect to v21.7b16
	* The master object and simul_efun object can be updated again when
	  LPC_TO_C is not defined; patch from d.collins@ic.ac.uk
	* unified the code handling function pointers/extra args in
	  various efuns; fixes crashers in rare cases.  Also, sort_array()
	  now takes additional args which are passed down the the function,
	  like filter() et al.
	* Added a check for the /usr/ucbinclude directory in ./build.MudOS;
	  Solaris needs <sys/rusage.h> from there
	* Removed push_string() internally; push_constant_string() should
	  now only be used on string constants.  The following changes
	  will preserve previous behavior:
	  . push_string(x, STRING_MALLOC) -> copy_and_push_string(x)
	  . push_string(x, STRING_SHARED) -> share_and_push_string(x)
	  . push_string(x, STRING_CONSTANT) -> push_constant_string(x)
	  . push_constant_string(x) -> share_and_push_string(x)
	  also, new function: push_shared_string(), which pushes and
	  references a known shared string.
	* optimized the PORT_ASCII code a bit, and fixed some problems/loops
	  in it in the presence of bad input/errors
	* fixed a bug that would cause message() to send messages/avoid the
	  wrong people if the target/avoid argument was _not_ an array,
	  and the function was called during the processing of another
	  message call whose target/avoid was also not an array
	* removed XALLOC(), since it isn't used any more
	* fixed mapping hash distribution and centralized the definition of
	  it
	* optimized terminal_colour a bit
	* optimized present() a bit; also fixed a leak in errors in id()
	  functions
	* the message of the message() efun may now be of any type; this
	  actually was side effect of a fix that makes message() more
	  efficient :-)
	* fixed a crasher in sprintf() table mode, when no number of
	  columns was specified (best fit)
	* improved the packages/ and mudlib/ dependencies a bit
	* configure.h is now remade if the information in 'uname -a' changes
	* no longer log a 'double call to remove_interactive()' if an object
	  self-destructs in net_dead()
	* There is no longer a limit on the number of sockets available;
	  if a limit is wanted it should be enforced in valid_socket()
	* fixed sprintf() column mode to wrap at the column width, not one
	  before
	* added a couple testsuite tests for sprintf table mode
	* ./build.MudOS now prints an error message if an unknown kind of
	  build is attempted instead of silently assuming the default
	* Parser changes:
	  . Two new restrictions; only one plural token is allowed per rule,
	    and only two object tokens are allowed per rule.  The second may
	    disappear after I clean it up a bit.
	  . fixed a crasher in having more than MAX_NUM_OBJECTS involved in
	    a parse
	  . 'all' is now supported, also 'all of ...', 'all red swords', etc
	  . Cases where more than one object are matches, but only one makes
	    sense now work
	  . in callbacks, only objects that have been completely parsed can
	    be refered to.  This means can_ and direct_ functions can't
	    reference the direct or indirect objects.  The corresponding
	    spots in the argument list are missing.
	  . OBS rules use the _obj_ callbacks, with the exception of do_
	  . error handling is now up to the master object via the
	    parser_error_message() apply.  The first argument is a int
	    indicating the error type.  The second is an object if this
	    message corresponds to part of a plural match, otherwise it
	    is zero.  The third and following args depend on the error
	    type (from include/parser_error.h):
	    ERR_IS_NOT, ERR_NO_LIVING, ERR_NOT_ACCESSIBLE:
		the noun used, and then 0/1 depending on whether there
	        ambiguity
	    ERR_AMBIG:
	        an array of objects that might have matched
	    ERR_ORDINAL:
	        The number that was refered to
	    ERR_THERE_IS_NO:
	        The string that couldn't be matched
	    ERR_ALLOCATED:
		The error message returned by the mudlib
	    ERR_BAD_MULTIPLE:
	        nothing
	    [note: if you want more info that you think the parser might
	     have, let me know]
	    compat/parser_error.c has a decent approximation of the old
	    behavior
	  . do_foo_obs() gets an array of objects and error messages as
	    the arg corresponding to obs
	  . Returned error strings which start with '#' are assumed to
	    be nonsense messages, and aren't counted for the purpose of
	    ordinals and all.  Useful to prevent 'get all' from printing
	    an error for yourself and the room, and to keep 'drop first sword'
	    from counting swords in the room.

Sat Jan 20 15:47:06 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a20
	* removed process_string() and process_value(); simul_efuns are
	  availaible in the compat/simuls directory
	* Fixed a memory leak in new(class foo, bar : baz, ...)
	* fixed compilation problems in grammar.y.pre, shallow_inherit_list,
	  object.c
	* fixed a typo: m_indices() is keys(), not values(); also added
	  m_delete
	* pluralization fixes: 'are', 'mackerel'
	* added Rust's timezone efuns to contrib; turned off by default
	  since they may not compile everywhere

Wed Jan  3 16:12:50 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a19
	* updated with respect to v21.7b15
	* All values which were previously 'null' are now undefined instead;
	  nullp() is now exactly the same as undefinedp()
	* added a COMPAT_32 option, which tweaks a few things to allow
	  some 3.2/3.2.1 code to be ported easier; see options.h for
	  what changes
	* shallow_inherit_list() is now the same as inherit_list() [unless
	  COMPAT_32 is on, in which shallow_inherit_list() is the MudOS
	  behavior, and inherit_list() becomes deep_inherit_list() ]
	* error message change: 
	    Missing type -> Missing type for global variable
	* Don't raise type mismatch errors for code of the form
	  'identifier = expr'; 'Missing type for global variable' is good
	  enough
	* Don't manually include <sys/resource.h> and <sys/rusage.h> in
	  interpret.c; trust configure instead
	* fixed a parser crasher in refering to 'noun', when more than
	  4 adjectives are possible
	* Fixed sprintf table mode to not stretch the last line to fit
	  the field width

Wed Jan  3 14:29:43 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a18
	* fixed some serious flaws in class member lookup introduced in a17

Tue Jan  2 17:59:42 EST 1996 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a17
	* updated with respect to v21.7b14
	* fixed a crasher in the call_out leak fix from v22a1
	* turned off PACKAGE_EXTERNAL by default
	* fixed a bug that caused the messages from saving the ed buffer
	  of an object which was dested while in ed to be appended to the
	  start of the next message sent to an object using ed.
	* check for wait3() as well before using BSD signals
	* removed wait() from lint.h since we include <sys/wait.h> now
	* fixed a couple bugs in the handling of functions in the memory
	  leak tracking code
	* fixed a crasher in add_action(function) when the driver is
	  run with the -d flag
	* fixed the addr_server not to crash if gethostbyname() fails for
	  some reason
	* function(...) { ... } is now rebindable if it does not reference
	  local functions or global variables
	* switch (...) { case 0: function() { break; }; },
	  while (...) { function() { continue; }; },
	  and similar pathological code is no longer allowed.
	* bind(f, ob) now always succeeds if f is already bound to ob
	* added back the fast version of livings() from v22a14 as a contrib
	  efun named_livings(); also fixed it to not return objects which
	  are no longer living()
	* added class support in reclaim_objects()
	* trailing justification is no longer added to the last line of
	  tables if no pad string was specified
	* The following is now legal:
	  class foo { int x; string y; }
	  class foo f1 = new(class foo, x : 5);
	  class foo f2 = new(class foo, y : "foo", x : 1);

Sat Dec 30 20:55:41 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a16
	* updated with respect to v21.7b13
	* changed the name of strerror to port_strerror to avoid prototypes
	  on SunOS, which prototypes the function but never defines it
	* Removed a number of prototypes in lint.h for functions which are
	  also prototyped in SunOS headers now
	* Fixed a bug that would prevent two way communication with external
	  commands
	* Small optimization to the string case of socket_write
	* Tracked down the real problem which caused sprintf() to crash
	  on empty tables; also fixed a crasher empty lines in column mode
	* reversed the livings() patch, since not all living objects are
	  in the hash table
	* #ifdef'd out some unnecessary code for when LPC_TO_C is off
	* Remember to wait on our children, so we don't create zombies;
	  configure checks to figure out whether to do it the BSD or
	  Sys V way
	* Removed some archaic defines from portability.h
	* Changed the parse_sentence return codes again:
	  1 - success
	  0 - no such verb
	 -1 - verb exists, but no rule matched
	 -2 - a rule made sense, but can_ or direct_ failed
	* Fixed a typo in the 'Illegal master object file name' error message

Fri Dec  8 20:53:11 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a15
	* updated with respect to v21.7b12
	* changed livings() to walk the living hash table instead of the
	  full object list; idea from Jihad
	* '\r' is now treated as whitespace by the compiler
	* The success return code of parse_sentence is now 3, not 1.
	* changed the return type of parse_sentence from 'int' to 'mixed'
	* Fixed a crasher in using a function pointer as a read callback
	* If PACKAGE_EXTERNAL is defined, then lines of the form:

	  external_cmd_1: /usr/local/bin/gzip

	  in the config file allow the mud to run the command using the
	  following efun:
	  
	  int external_start(int which, string args,
	                     mixed read_cb, mixed write_cb, mixed close_cb)

	  which is the command number (e.g. 1 from the example above)
	  args is the argument passed to the command.  A socket is returned,
	  which can be used to communicate with stdin/stdout of the command.

	  valid_socket() is passed "external" as the operation.
	  Up to 5 commands are allowed.

Thu Dec 21 01:33:34 PST 1995 (gstein@svpal.org (Deathblade))
	* raised patchlevel to v22a14
	* fixed varargs by tweaking grammar.y.pre to not turn off the
          TYPE_MOD_ARRAY flag for the varargs variable
	* fixed sprintf() crasher when tables are used (Rust and Zakk)

Thu Dec  7 12:30:20 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a13
	* fixed crasher in disabling a heart_beat during a heart_beat
	* fixed sprintf() to not add trailing padding onto wrapped strings
	* removed the break_string() efun.  See compat/simuls/break_string.c
	  for a replacement.
	* fixed a few more misoptimizations of last variable references by
	  the optimizer.
	* added a warning for putting varargs args into a variable of
	  non-array type, also fix a bug that would cause type errors
	  if the prototype was in scope
	* parse_sentence now returns:
	    0 - no such verb
	    1 - verb exists, but no rule matched
	    2 - a rule made sense, but can_ or direct_ failed
	  in the cases where it used to return zero.
	* parse_add_rule no longer has a third arg; it is always this_object()
	* New parse efun:
	  parse_add_synonym(string new, string old):
	    . interpret the verb 'new' as if it were the verb 'old', and
	      parse using 'old's rules and routines
	  parse_add_synonym(string new, string old, string rule):
	    . 'new' acts like 'old' for only the rule 'rule', which must
	      have been previously added.  Can be called multiple times.

Wed Dec  6 18:00:15 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a12
	* fixed a crasher in passing a negative number as the field width
	  via the '*' specifier
	* fixed a crasher in strings which were too long to fit into tables
	  in table mode

Tue Dec  5 19:30:12 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a11
	* fixed two crashers in the table generation logic of sprintf(),
	  also fixed a bug that would cause the second and following
	  lines to be indented wrong
	* fixed tables to fully fill the space allocated to them in
	  the format description
	* The fill pattern for tables and columns always fills out the
	  entire 'box' now; e.g.
	  printf("%#|30'.'s\n", "apple\nbannana\ncherry\ndonut\nelf\nfruit\n")
	  gives:
	    ...apple....cherry......elf...
            ..bannana....donut.....fruit..
	  and not:
	    ...apple....cherry......elf
            ..bannana....donut.....fruit

Mon Dec  4 16:13:59 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a10
	* updated with respect to v21.7b11
	* moved values_list in function_context_t and node in decl to
	  align slightly better
	* fixed the direct/dirent check to include std_incl.h in case it
	  has some defines needed by those files
	* removed some really old and unused files of the compiler %union
	  (address and funp; the second of which predates me ...)
	* small optimization to the lexer's handling of comments in
	  preprocessor lines
	* major changes to sprintf.c:
	  . COMPAT_BUSTER: error messages are never returned any more, but
	    are thrown as errors instead.
	  . 'clean' is no longer used, so cannot be leaked
	  . COMPAT_BUSTER: "%^" is no longer special (for efficiency reasons,
	    as well as disagreements on the exact algorithm)
	  . The format string is never written into, eliminating the need
	    for savechars and related hacks; fixes a crasher in extremely
	    long strings in tables (>2k)
	  . The setjmp()/longjmp() is gone, since the cleanup can be done
	    on the next call to sprintf() now
	  . sprintf() is now officially not reentrant, and you will get
	    an error if you try.  It probably crashed before if you tried
	    it.  The only LPC code called by sprintf() is object_name(),
	    so this shouldn't be a problem
	  . on the whole, things should be significantly faster (slightly
	    more than 3 times faster on the small example I used),
	    mostly due to collecting sets of characters instead of adding
	    characters individually, and removing redundant length calculations
	  . large portions of the file are now actually readable

Mon Nov 27 22:51:35 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a9
	* updated with respect to v21.7b10
	* COMPAT_BUSTER: The scope of for and foreach loop variables is now
	  only the inside of the loop.  This also fixes a bug demonstrated
	  by the following:
	   { int i; for (int j;;) ; } { int i; }
	* Some error message changes:
	  . Indexing on illegal type
	    -> Value being indexed is zero/Cannot index value of type 'foo'.
	  . Indexing a (string/array) with an illegal type
	    -> (String/Array) indexes must be integers
	  . Negative index passed to array
	    -> Array index must be positive or zero

Wed Nov 22 12:52:13 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a8
	* updated with respect to v21.7b9
	* fixed a typo in ./build.MudOS (CC -> $CC)
	* fixed a crasher in copying parse_command_* arrays which are empty

Tue Nov 21 17:16:10 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a7
	* updated with respect to v21.7b8
	* fixed the ar test to make sure comptest.o exists in ./build.MudOS
	* Leading and trailing whitespace in the values in the config file
	  is now ignored

Wed Nov 15 14:41:20 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a6
	* updated with respect to v21.7b7
	* Better system for reporting bad malloc configurations (two malloc
	  packages, etc) and system configuration errors
	* Report a redefinition error if classes with the same name are
	  inherited from different files
	* Fixed the "Return type doesn't match prototype' error message
	  to only be printed once per occurance, not twice

Tue Nov 14 12:53:51 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a5
	* updated with respect to v21.7b6
	* A few small tweaks to the testsuite cleanup
	* fixed crasher in printing a string containing a '%' when
	  NONINTERACTIVE_STDERR_WRITE was defined
	* some small cleanups to includes in socket_ctrl.c

Tue Nov  7 17:50:22 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a4
	* updated with respect to v21.7b5
	* updated all the Makefiles with respect to Makefile.master
	* minor change: use 0 instead of -1 for master_ob not loaded yet since
	  we no longer have to distinguish between unloaded/not loaded yet
	* added MDmemcheck() which can be inserted into the source to do
	  internal memory consistency checks and abort if corruption is found
	* added back some parser fixes that were missing due to reversed
	  patches
	* Two new options to ./build.MudOS:
	  - ./build.MudOS develop -> turn on warnings and debugging code
	  - ./build.MudOS debug -> turn on debugging symbols and code

Fri Nov  3 16:41:11 EST 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a3
	* updated with respect to v21.7b4
	* couple changes to void handling, basically (int)->(void) is no longer
	  legal.  The following are now errors:
	  . int f(void x) { ... }
	  . ... { void x; } ...
	  . void x;
	  . class foo { void x; }
          . void f() { return 1; }
	* defining a variable is now allowed in foreach, e.g.:
	  . foreach (string x, object y in z)
	* fixed a crasher in errors in parse_* callbacks

Sun Oct  8 19:48:21 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a2
	* updated with respect to v21.7b3
	* COMPAT_BUSTER: previous_object() == 0 and not this_object() in
	  heart_beats
	* remove_call_out(/* no arg */) now returns 0 always, not -1
	* fixed a bug in the replace_string() with all 5 arguments in
	  some cases
	* fixed a bug in restoring mappings which had arrays/mappings/
	  floats as keys
	* added some missing newlines to regexp() error messages
	* fix to the center/left justify case for ints; remember to
	  add the padding to the right side as well in sprintf()
	* more testsuite efun tests; finished through 'sprintf()'
	  or so
	* made it illegal to undefine or redefine a global define like
	  __VERSION__
	* added a NO_RESETS option
	* better error message for people who don't choose a malloc package
	* fixed various crashers involving passing garbage back to the
	  parser inside arrays
	* fixed leak in sprintf() for printing recursive structures; attempting
	  to do so no longer errors.

Sun Oct  8 19:27:28 EDT 1995 (tim@handel.princeton.edu (Beek))
	* raised patchlevel to v22a1
	* removed some outdated code (c_filter() and f_creator())
	* fixed a crasher in removing heart_beats during a heart_beat
	* fixed a leak in call_outs with more than one extra argument
	* fixed a leak in illegal arguments to call_stack()
	* fixed set_light() to compile with NO_ENVIRONMENT (for the
	  ultimate in bleeding edge uses of archaic efuns :) )
	* added some checks to make compilation bomb more informatively
	  if two malloc packages/wrappers are specified
	* cleaned up the signal handling code a bit
	* fixed compilation of the matrix package
	* fixed compilation with NO_ENVIRONMENT and !NO_ADD_ACTION
	* fixed compilation with DO_MSTATS and SYSMALLOC
	* fixed testsuite to compile and work with either setting of
	  INTERACTIVE_CATCH_TELL, NO_ADD_ACTION, PACKAGE_UIDS,
	  NO_ENVIRONMENT, NO_WIZARDS, PRIVS
	* revamped the testsuite efun tests, and added tests for most of
	  the efuns 'a' through 'r' or so
	* testsuite now logs compilation errors to /log/compile
