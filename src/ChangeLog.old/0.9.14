Fri Mar  5 16:31:26 CST 1993 (John Garnett [Truilkan])
	* bumped the patchlevel up to 0.9.15
	* removed #pragma alloca from config.h (for RS/6000) since MudOS doesn't
	  use alloca() anymore.

Tue Jan 26 23:56:06 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.18
	* ifdef'd out fchmod() prototype for Linux in file.c and simulate.c
	  -- fix from Stranger@TMI-2
	* In a previous release, I optimized the code generation for FOR
	  and WHILE loops.  This optimization interacted with a pre-existing
	  optimization to cause a nasty little bug in which the first
	  statement of the body of a 'for loop' could be (incorrectly)
	  modified depending on the contents of the third 'for_expression'.
	  This bug is what caused the old tmi soul (atmos) to generate
	  a runtime error that it didn't generate before.  This bug is now dead.
	* COMPAT BUSTER: modified restore_object() and save_object() to both
	  take an optional additional (integer) parameter which specifies whether
	  or not to save variables having value 0.  save_object(filename)
	  or save_object(filename, 0) will _not_ save variables having value
	  zero.  save_object(filename, 1) will save variables having value zero
	  (this is the old default behavior).  restore_object(filename) or
	  restore_object(filename, 0) _will_ zero out all non-static variables
	  before doing the restore.  restore_object(filename, 1) will not
	  zero out non-static variables before doing the restore (this is
	  the old default).  The idea is that many objects in most mudlibs
	  contain variables that usually have value 0.  Not saving these
	  variables can save a noticeable amount of disk space. -- patch
	  submitted by Armidale@Cyberworld.
	* added ARCH def for Linux in port.h (capitalized some of the others).
	* added #ifndef's to port.h for Linux (FD_SETSIZE and SOMAXCONN)
	  -- these Linux fixes were reported by Stranger@TMI-2
	* added !defined(linux) for rmdir(), unlink() in lint.h for Linux
	* renamed socket_errors.* to socket_err.* for Linux filesystem.
	* added SAVE_EXTENSION to options.h.  This lets an extension other than
	  .o be used by save_object() and restore_object().  (Some sysadmins
	  run scripts that periodically scan for and remove .o files since
	  these files are also left hanging around by UNIX(tm) compilers).
	* fixed a bug in T_FUNCTION case in dumpstat.c (added & to two parameters)
	* replaced smalloc.c with Amylaar's latest version
	  (adapted to MudOS by Blackthorn).  This version of smalloc.c is 
	  markedly faster than the old smalloc.c and appears to be as efficient
	  in memory usage.  It also may work on some machine(s) that used to
	  have data alignment problems with the old smalloc.

Mon Jan 25 07:30:02 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.17
	* added a few support files to be kept in the src directory
	  (e.g. README, Platforms, Install, Credits.*, etc).  The doc dir in
	  the main distribution will probably have symlinks to these files.
	* moved ChangeLog.0 and ChangeLog.1 out of the source (src) directory.
	  These will still be available in the main MudOS_0.9.tar.Z releases.
	* fixed a bug introduced into debug_info in 0.9.14.15 (fixes crasher)
	* replaced smalloc.c with the original version of smalloc that
	  MudOS 0.8.14 (and before) used.  This version appears to have fewer
	  problems than the version that's been a part of MudOS as of late
	  (the smalloc we were using didn't behave correctly on HPs in that
	  it allocated memory that wasn't freed even when the driver shutdown).
	  Note: if your mud is using more memory than you think it should
	  (the amount of memory reported by 'ps' is 30% or more higher than
	  that reported by status), then you may wish to try smalloc.  While
	  smalloc may have problems with alignment etc on some machines, it is
	  still much more efficient for LPmuds than BSD malloc (and some system
	  mallocs) and thus worth trying.  Apparently, BSD malloc can introduce
	  overhead as much as 35% or more (while smalloc seemingly introduces a
	  constant amount of overhead, e.g. 700,000 bytes).

Sun Jan 24 13:57:17 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.16
	* added Olav Kolbu's patches to port MudOS to Linux 0.99.3.  Someone should
	  doublecheck to make sure it does in fact now compile under Linux since I
	  applied the patches by hand (the patches were for 0.9.14.14).  Linux
	  users will need to install "loopback telnet" before using this port.
	* defined SOMAXCONN and FD_SETSIZE for linux in port.h.  These should
	  be removed and obtained from .h files when the Linux .h structure
	  stabilizes.
	* changed f_function_split() in eoperators.c so that it doesn't allow
	  call_other's on destructed objects.
	* copied back the Makefile from 0.9.14.14 since some machines (like HP)
	  had problems with the one in 0.9.14.15.
	* note: the yacc provided by some machines has a hardcoded limit on
	  the number of terminals allowed.  Two possible solutions: 1) build
	  lang.tab.* on a machine without such limits and move them over,
	  2) get bison (yacc replacement) from prep.ai.mit.edu:/pub/gnu and
	  use it instead.
	* changed absorb_mapping() to INLINE in lint.h to match mapping.c

Sat Jan 23 20:02:34 CST 1993 (Truilkan)
	* bumped the patchlevel up to 0.9.14.15
	* changed the debugmalloc (md.c) code to get a more accurate idea of
	  how memory is being used.  Each *ALLOC() (memory allocation call)
	  is now indexed by a different consecutive integer.  The
	  debugmalloc(filename, 0) efun can be used to dump the memory allocated
	  on a per *ALLOC() call basis to a file.  In order to take advantage
	  of these additional debugging facilities, the driver must be compiled
	  using DEBUGMALLOC and DEBUGMALLOC_EXTENSIONS in options.h.  Only
	  define these options when tracking memory usage (don't leave them
	  defined all the time in a production mud -- it would be too slow).
	* fixed a problem in the T_MAPPING case of F_INDEX in interpret.c.
	  map[ind] wasn't returning the right answer in the case where map
	  had a ref count of 1 (e.g. rusage()["usertime"])
	  -- reported by Blackthorn.
	* changed dump_socket_status(void) to dump_socket_status() in func_spec.c
	  -- fixes a potential crasher.
	* added error() efun which is like throw() but doesn't require a catch().
	* changed dump_file_descriptors(void) in func_spec.c to be
	  dump_file_descriptors() -- should fix a potential crasher.
	* fixed filter_array() in func_spec.c to not take first arg of type
	  mapping since filter_array() doesn't yet handle mappings.
	* changed sizeof() in func_spec.c to be "int sizeof(mixed)";
	* changed snoop() in func_spec.c so that 1st arg can't be void.
	* changed func_spec.c so that debug_info takes args (int, object).
	  Fixed debug_info() not to check # of args and type of 2nd arg
	  (eval_instruction() will do this for us) -- reported by Olav Kolbu.
	* fixed print_svalue() in simulate.c to know about T_MAPPING and T_FUNCTION
	* fixed dumpallobj() to handle T_FUNCTION (fixes crasher) -- reported by
	  Darin Johnson.
	* added a new efun "int refs(mixed)" that returns the number of
	  references to a given data structure (object, array, mapping, funp).
	  This is useful when deciding whether or not to make a copy of
	  a datastructure when responding to a query.
	* added "expr_t *pop_expression();" to prelang.y
	* cleaned up Makefile some (Luke Mewburn)
	* refixed the ed "set" command (missed one place needing fixed last time).
	  Also fixed a couple of cosmetics (typos etc).
	* changed postlang.y so that & can be used to intersect arrays as was
	  originally intended (the typechecking wasn't being done correctly).
	* changed process_value() in parse.c to use find_object() instead of
	  find_object2() so that process_string() will work correctly even if
	  the objects in question aren't already loaded.
	* changed set_call() in comm.c to only unset SGA if it were previously set.
	  I suspect that copy_chars() may have something to do with the newlines
	  problem experienced with get_char().
	* applied Luke Mewburn's patches to port MudOS to 386BSD 0.1.
	  The changes were fairly minimal.  Luke recommends that
	  if a person wishes to install MudOS on a 386bsd system, they should
	  first apply Terry Lambert's entire patchkit, and also follow the
	  instructions on installing 'crypt'.
	* ported MudOS to Apple UNIX(tm), A/UX. This required only minimal changes.
	  Note that A/UX's version of yacc is old and can't handle more than
	  200 symbols (if it can I don't know how to make it do so).  This means
	  you'll need to build lang.tab.c and lang.tab.h on some other machine
	  and move them to A/UX (be sure to add -D_AUX_SOURCE to CFLAGS in
	  the Makefile on the non-A/UX machine when building lang.tab.*.  Also
	  make sure that you configure config.h in the same way on both machines).
	  Thanks to the UT Austin RTF ACTLAB for making the machine available to
	  do the port.

Sat Dec 19 20:29:45 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.14
	* note: the suggested course of action is to try using 0.9.14.14.
	  If it crashes for unknown reasons then try 0.9.14.13, then 0.9.14.12,
	  and finally 0.9.14.8 until you get to a version that doesn't crash
	  in the way this one does (if it does :).  Let me know which versions
	  run okay for you: (mudos-bugs@gestalt.austin.tx.us).
	* added the optimized version of += (F_ADD_EQ and F_VOID_ADD_EQ) to
	  interpret.c.  This involves minor changes in postlang.y, prelang.y
	  and lex.c as well.  I did not add the optimization for += on arrays
	  (since I suspect this was the cause of the crasher that Blackthorn saw
	  on Genocide).
	* added F_VOID_ASSIGN to interpret.c (involved small mods to prelang.y and
	  and postlang.y).
	* added absorb_mapping to mapping.c.  This function is now used by the
	  mapping case of +=.  This means that: "map1 += map2;" will change
	  the original instance of map1 rather than creating a new one.  Thus:
	  map1 += map2; becomes a faster way to do:
	  k = keys(map2); for (j = 0; j < sizeof(k); j++) map1[k[j]] = map2[k[j]];
	  If you wish the old behavior of +=, use map1 = map1 + map2.

Sat Dec 19 16:07:38 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.13
	* fixed a bug in ed in which the 'set' command sometimes crashed the
	  driver (the loop termination detection condition wasn't correct).
	* added a new function valid_hide() to the driver that is to be
	  called whenever "valid_hide" needs to be applied on the master object.
	* changed message() so that it delivers messages to hidden objects
	  regardless of whether or not the sender can hide.
	* COMPAT BUSTER: changed log_file() efun to call valid_write in master

Fri Dec 18 21:56:53 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.12
	* fixed the general compile time switch case problem
	* added some add_instr_name() entries to lex.c for the new instructions.
	* changed some declarations in lint.h for the Apollo (e.g. major, minor)
	* made minor changes to addr_server.c, comm.c, file.c, socket_efuns.c,
	  efunctions.c, efuns.h, comm.h, port.h, socket_efuns.h, prelang.y that
	  were necessary for the Apollo.
	* removed check_for_recursion() from array.c since its unused.
	* inlined setup_new_frame in interpret.c
	* changed push_number(0) to push_null() in setup_new_frame()
	* moved f_add_eq into F_ADD_EQ of interpret.c
	* changed the F_JUMP_WHEN_NON_ZERO in the FOR lang.y production to
	  F_BBRANCH_WHEN_NON_ZERO (faster branches)
	* moved the efun interface into the default case of the switch in
	  interpret.c (one less "if then" in the most often taken path)
	* moved f_add_eq into the interpret.c switch
	* moved f_call_function_by_addr into the interpret.c switch
	* note: I've left out the patches that gave the performance boosts on
	  += for strings and arrays.  I think these may be the ones that caused
	  the crash (if the changes were what was responsible -- We'll see).
	  I'll attempt adding these after this release has run okay for a while.
	* trashed changes from 0.9.14.9 to 0.9.14.11 since 0.9.10 crashes
	  for Blackthorn and 0.9.14.8 didn't.  I'm reapplying most of them here.

Fri Dec 18 02:39:36 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.8
	* added F_BYTE and F_NBYTE operators for storing numeric constants that
	  will fit in a byte (saves some memory).
	* added relative branch instructions: F_BRANCH, F_BRANCH_WHEN_ZERO,
	  F_BRANCH_WHEN_NON_ZERO, F_BBRANCH_WHEN_ZERO, and F_BBRANCH_WHEN_NON_ZERO
	  so that expressions may generate relocatable code (necessary for
	  the LPC loop optimizatons).
	* fixed expressions containing logical ANDs and logical ORs (in postlang.y)
	  to use relative branching (so that expressions can be relocated).
	* added SNOOP_SHADOWED to options.h.

Thu Dec 17 06:24:16 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.7
	* fixed replace_string so that a non-string 3rd argument won't crash
	  driver (thanks to Fifth Dimension mud for reporting this).
	* inserted some "last_expression = -1" statements in postlang.y.
	* changed the type of arg_index in the lex.c keyword struct to be a
	  short instead of a char (this fixes a bug that occurs with
	  typechecking of efuns when more than 127 different argument type
	  combinations exist (Thanks to Dracos@VH for reporting this)).
	* added defined(sgi) to one place in file.c (for sysmacros.h) and
	  one place in efunctions.c for the timezone stuff (thanks to Kringled
	  for pointing out what needed done for a Silicon Graphics (SGI) port).
	* fixed a bug in the FOR production in postlang.y.  There was a typecast
	  "(short)jump" that should have been "(unsigned short)jump".  Hopefully,
	  this explains the crasher Genocide was seeing with 0.9.14.4.
	* removed F_INDIRECT from prelang.y and lex.c since its not used.

Wed Dec 16 19:31:58 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.6
	* added (char *) typecasts to the new MALLOC()'s in postlang.y.
	* optimized append_vector() and prepend_vector() functions since
	  UnderDark seems to use append_vector a lot.  I imagine that the
	  real solution is to optimize the LPC "+=" operator.

Wed Dec 16 08:07:11 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.5
	* readded arch() to func_spec.c (somehow it disappeared)
	* added the F_INC and F_DEC optimizations to postlang.y and interpret.c.
	  This removes an additional instruction from the typical for loop.
	* optimized eval_instruction a bit.
	* added the moncontrol() efun which is enabled when -DPROFILING is
	  added to CFLAGS in the makefile.  This efun allows profiling to
	  be turned on and off from an LPC object (so that its easier to
	  profile a specific part of the driver).

Tue Dec 15 09:32:39 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.4
	* optimized the three LPC loop productions (for, while, do while) in
	  postlang.y.  The optimizations involve delaying inserting the code
	  for the loop test expressions until after the code for the loop body
	  has been inserted (I followed the lead set in Amylaar's 3.1.2k driver).
	  This optimization works by using fewer LPC instructions per loop
	  iteration (7 instead of 9 in the for loop).  The net improvement on
	  The VOID_ADD_EQ optimization (and others) remains to be done (this
	  would shave another LPC instruction from the for loop).
	* ifdef'd the varargs code in add_message() in comm.c since some
	  compilers don't support it.
	* ifdef hpux'd the inclusion of lint.h in bsdmalloc.c

Tue Dec 15 00:49:23 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.3
	* changed string literals to span multiple lines (allowing newlines to
	  be implicitly embedded).  Might have to change this back if there
	  turns out to have been a reason for disallowing this in the first place.
	* added a new feature similar to the << EOF text reading feature
	  provided by Perl.  The @ character now means interpret from 'here'
	  til the end of the line as the "terminator".  Lex then considers each
	  following line up to the terminator as forming part of a string literal.
	  An example usage is as follows:
	  /* assume this is at the left margin */
	  x = @END
	  This is taken literally.
	  And so is this.
	  END
	  ;

Mon Dec 14 19:38:42 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.2
	* enhanced the driver to allow variables of type function to be indexed
	  with [] in the same way that mappings and arrays are.  Note that
	  function variables may only be indexed with 0 or 1.  Thus:
	  'function f; f = (: obj, func :); f[0] = obj2; f[1] = str2;' and
	  'obj2 = f[0]; str2 = f[1]' are possible.

Mon Dec 14 02:19:58 CST 1992 (Truilkan)
	* bumped the patchlevel up to 0.9.14.1
	* undef'd TRACE_CODE in options.h since benchmarks show that this
	  doubles the speed of eval_instruction (for many of the operators).
	* fixed a problem with the new function variable type.  (*x)() wasn't
	  returning values properly.
	* changed the apply_master_ob in smart_log to safe_apply_master_ob
	  since without it repeated errors in log_error in master.c can
	  (and do) crash the driver.
	* properly inlined push_funp, make_funp, and free_funp and moved them
	  to eoperators.c since xlc in AIX 3.2 is still complaining about not being
	  able to -Q optimize interpret.c (and it was able to in 0.9.13.11).


	* changed the output format of debugmalloc() efun slightly.
	* changed all *ALLOC() calls to D*ALLOC() so that debugmalloc() efun
	  can be better used to track down any memory leaks.
	* added Cynosure's livings() efun that returns an array of all objects
	  that have called enable_commands().
