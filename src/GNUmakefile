MAKE=gmake
SHELL=/bin/sh
OBJDIR=obj
DRIVER_BIN=driver
PROOF=
STRFUNCS=
INSTALL=install -c
INSTALL_DIR=../bin
OPTIMIZE=
CPP=cc -E
CFLAGS= -g -DDEBUG
CC=cc
YACC=bison -d -y

#################################################
# the meat of things                            #
# don't change anything below this section      #
#################################################

SRC=grammar.tab.c lex.c main.c rc.c interpret.c simulate.c file.c object.c \
  backend.c array.c mapping.c comm.c ed.c regexp.c swap.c buffer.c crc32.c \
  malloc.c mallocwrapper.c class.c efuns_main.c efuns_port.c \
  call_out.c otable.c dumpstat.c stralloc.c hash.c mudlib_stats.c \
  port.c reclaim.c parse.c simul_efun.c sprintf.c uid.c program.c \
  compiler.c avltree.c icode.c trees.c generate.c scratchpad.c \
  socket_efuns.c socket_ctrl.c qsort.c eoperators.c socket_err.c md.c \
  strstr.c disassembler.c binaries.c ualarm.c $(STRFUNCS) \
  replace_program.c functab_tree.c ccode.c cfuns.c compile_file.c

VPATH = $(OBJDIR)

OBJ=$(addprefix $(OBJDIR)/,$(subst .c,.o,$(SRC)))

$(OBJDIR)/%.o: %.c $(OBJDIR)
	$(CC) -I$(OBJDIR) $(CFLAGS) -o $@ -c $<

all: GNUmakefile.MudOS $(OBJDIR) grammar.y cc.h opcodes.h malloc.c
	$(MAKE) -f GNUmakefile.MudOS  'DRIVER_BIN=$(DRIVER_BIN)' \
	'OBJ=$(OBJ)' 'MAKE=$(MAKE)' 'CC=$(CC)' 'CFLAGS=$(CFLAGS) $(OPTIMIZE)' \
	'PROOF=$(PROOF)' 'OBJDIR=$(OBJDIR)' 'SRC=$(SRC)' 'YACC=$(YACC)'

GNUmakefile.MudOS: edit_source
	./edit_source -process GNUmakefile.MudOS.pre

$(OBJDIR):
	mkdir $(OBJDIR)

which_makefile:
	echo MakeIsGNU

remake: neat all

depend: opcodes.h efun_protos.h grammar.tab.h cc.h efunctions.h efun_defs.c
	-rm tmpdepend Dependencies
	for i in *.c do $(CPP) -MM $$i; done
	sed -e"s!^!$(OBJ)!" <tmpdepend >Dependencies
	-rm tmpdepend

grammar.y: grammar.y.pre edit_source
	./edit_source -process grammar.y.pre

cc.h: GNUmakefile
	rm -f cc.h
	echo "/* this file automatically generated by the Makefile */" > cc.h
	echo '#define COMPILER "$(CC)"' >> cc.h
	echo '#define OPTIMIZE "$(OPTIMIZE)"' >> cc.h
	echo '#define CFLAGS   "$(CFLAGS) $(OPTIMIZE)"' >> cc.h
	echo '#define OBJDIR   "$(OBJDIR)"' >> cc.h

# The long list in the first ./edit_source depend on -options
opcodes.h: options.h func_spec.c op_spec.c edit_source
	./edit_source -options -build_func_spec '$(CPP) $(CFLAGS)' \
		      -process packages/Makefile.pre \
                      -process packages/GNUmakefile.pre
	./edit_source -build_efuns

malloc.c: sysmalloc.c smalloc.c bsdmalloc.c wrappedmalloc.c debugmalloc.c options.h edit_source
	./edit_source -malloc
	touch mallocwrapper.c

make_func.tab.c: make_func.y cc.h
	$(YACC) $(YFLAGS) make_func.y
	-rm -f make_func_tab.c
	mv y.tab.c make_func.tab.c

$(OBJDIR)/edit_source.o: edit_source.c preprocess.c cc.h

edit_source: $(OBJDIR)/edit_source.o $(OBJDIR)/hash.o $(OBJDIR)/make_func.tab.o
	$(CC) $(CFLAGS) $(OBJDIR)/edit_source.o $(OBJDIR)/hash.o $(OBJDIR)/make_func.tab.o -o edit_source
	./edit_source -configure

tags: $(SRC)
	ctags $(SRC)

TAGS: $(SRC)
	etags $(SRC)

install: all
	-mkdir $(INSTALL_DIR)
	$(INSTALL) $(DRIVER_BIN) $(INSTALL_DIR)
	$(INSTALL) addr_server $(INSTALL_DIR)

Makefiles: edit_source
	./edit_source -process Makefile.in.pre
	./edit_source -process GNUmakefile.in.pre
	./edit_source -process Makefile.MudOS.pre
	./edit_source -process GNUmakefile.MudOS.pre

neat:
	-(cd packages; $(MAKE) clean)
	-(cd mudlib; $(MAKE) clean)
	-rm -rf obj *.o *.tab.c *.tab.h
	-rm -f efun_defs.c option_defs.c
	-rm -f cc.h configure.h
	-rm -f opcodes.h efunctions.h opc.h efun_protos.h
	-rm -f edit_source malloc.c mallocwrapper.c
	-rm -f func_spec.cpp
	-rm -f grammar.y comptest.* a.out
	-rm -f Makefile.MudOS GNUmakefile.MudOS
	-rm -f packages/Makefile packages/GNUmakefile

nothing:

clean: neat
	-rm -f core
	-rm -f *.orig *.rej
	-rm -f */*.orig */*.rej
	-rm -f *.ln tags */*~ *~ TAGS
	-rm -f $(DRIVER_BIN) $(DRIVER_BIN).old addr_server
	-rm -f Dependencies
	-touch Dependencies

include Dependencies
